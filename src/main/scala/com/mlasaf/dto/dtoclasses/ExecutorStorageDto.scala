/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dto 
 
 
case class ExecutorStorageDto ( 
     val executorStorageId : Long
     , val guid : Long
     , val insertedRowDate : java.util.Date
     , val lastUpdatedDate : java.util.Date
     , val executorHostId : Long
     , val executorStorageTypeId : Long
     , val storageDefinition : String
     , val storageBasePath : String
     , val storageFulllPath : String
     , val isRunning : Int
     , val portNumber : Int 
     ) extends BaseDto {  
   def tableName : String = {    "executorStorage";    }  
   def fields : String = {    "executorStorageId,guid,insertedRowDate,lastUpdatedDate,executorHostId,executorStorageTypeId,storageDefinition,storageBasePath,storageFulllPath,isRunning,portNumber";    }  
   def pkFields : String = {    "executorStorageId";    }  
   def fkFields : String = {    "executorHostId,executorStorageTypeId";    }  
   def nameField : String = {    "";    }  
 def getPk() : Long = {    executorStorageId  }  
 def getInsertedRowDate() : java.util.Date = {    insertedRowDate  }  
 def getLastUpdatedDate() : java.util.Date = {    lastUpdatedDate  }  
 def getGuid() : Long = {    guid  }  
 def toAnyArray() : Array[Any] = {    Array(executorStorageId,guid,insertedRowDate,lastUpdatedDate,executorHostId,executorStorageTypeId,storageDefinition,storageBasePath,storageFulllPath,isRunning,portNumber)  }  
 def toStringArray() : Array[String] = {    Array(""+executorStorageId,""+guid,""+insertedRowDate,""+lastUpdatedDate,""+executorHostId,""+executorStorageTypeId,""+storageDefinition,""+storageBasePath,""+storageFulllPath,""+isRunning,""+portNumber)   }  
 def toJson() : String = {   "{" + "\"executorStorageId\":\""+executorStorageId+"\""+","+"\"guid\":\""+guid+"\""+","+"\"insertedRowDate\":\""+insertedRowDate+"\""+","+"\"lastUpdatedDate\":\""+lastUpdatedDate+"\""+","+"\"executorHostId\":\""+executorHostId+"\""+","+"\"executorStorageTypeId\":\""+executorStorageTypeId+"\""+","+"\"storageDefinition\":\""+storageDefinition+"\""+","+"\"storageBasePath\":\""+storageBasePath+"\""+","+"\"storageFulllPath\":\""+storageFulllPath+"\""+","+"\"isRunning\":\""+isRunning+"\""+","+"\"portNumber\":\""+portNumber+"\"" + "}"   }  
 def toFullString() : String = {    "executorStorageId:'"+executorStorageId+"'"+","+"guid:'"+guid+"'"+","+"insertedRowDate:'"+insertedRowDate+"'"+","+"lastUpdatedDate:'"+lastUpdatedDate+"'"+","+"executorHostId:'"+executorHostId+"'"+","+"executorStorageTypeId:'"+executorStorageTypeId+"'"+","+"storageDefinition:'"+storageDefinition+"'"+","+"storageBasePath:'"+storageBasePath+"'"+","+"storageFulllPath:'"+storageFulllPath+"'"+","+"isRunning:'"+isRunning+"'"+","+"portNumber:'"+portNumber+"'"   } 
   def getFieldValue(name : String) : Any = { 
    val ret = name match { 
    case "executorStorageId" => executorStorageId  
     case "guid" => guid  
     case "insertedRowDate" => insertedRowDate  
     case "lastUpdatedDate" => lastUpdatedDate  
     case "executorHostId" => executorHostId  
     case "executorStorageTypeId" => executorStorageTypeId  
     case "storageDefinition" => storageDefinition  
     case "storageBasePath" => storageBasePath  
     case "storageFulllPath" => storageFulllPath  
     case "isRunning" => isRunning  
     case "portNumber" => portNumber   
    case _ => null 
    } 
    ret 
  } 
   def getFieldTypeName(name : String) : String = { 
    val ret = name match { 
    case "executorStorageId" => "Long"  
     case "guid" => "Long"  
     case "insertedRowDate" => "java.util.Date"  
     case "lastUpdatedDate" => "java.util.Date"  
     case "executorHostId" => "Long"  
     case "executorStorageTypeId" => "Long"  
     case "storageDefinition" => "String"  
     case "storageBasePath" => "String"  
     case "storageFulllPath" => "String"  
     case "isRunning" => "Int"  
     case "portNumber" => "Int"   
    case _ => "Object" 
    } 
    ret 
  } 
   def prepareInsert(connection : java.sql.Connection) : java.sql.PreparedStatement = {
     val stat = connection.prepareStatement("insert into executorStorage(guid,executorHostId,executorStorageTypeId,storageDefinition,storageBasePath,storageFulllPath,isRunning,portNumber) values (?,?,?,?,?,?,?,?)", java.sql.Statement.RETURN_GENERATED_KEYS);
    stat.setObject(1, guid);
    stat.setObject(2, executorHostId);
    stat.setObject(3, executorStorageTypeId);
    stat.setObject(4, storageDefinition);
    stat.setObject(5, storageBasePath);
    stat.setObject(6, storageFulllPath);
    stat.setObject(7, isRunning);
    stat.setObject(8, portNumber);
    return stat; 
   } 
   def modify(executorHostId : Long, executorStorageTypeId : Long, storageDefinition : String, storageBasePath : String, storageFulllPath : String, isRunning : Int, portNumber : Int) : ExecutorStorageDto = {
    val dtoModified = new ExecutorStorageDto(this.executorStorageId,this.guid,this.insertedRowDate,new java.util.Date(),executorHostId,executorStorageTypeId,storageDefinition,storageBasePath,storageFulllPath,isRunning,portNumber);
    dtoModified
  }
 } 
object ExecutorStorageDto { 
  val TABLE_NAME = "executorStorage"; 
   val FIELD_executorStorageId = "executorStorageId";
   val FIELD_guid = "guid";
   val FIELD_insertedRowDate = "insertedRowDate";
   val FIELD_lastUpdatedDate = "lastUpdatedDate";
   val FIELD_executorHostId = "executorHostId";
   val FIELD_executorStorageTypeId = "executorStorageTypeId";
   val FIELD_storageDefinition = "storageDefinition";
   val FIELD_storageBasePath = "storageBasePath";
   val FIELD_storageFulllPath = "storageFulllPath";
   val FIELD_isRunning = "isRunning";
   val FIELD_portNumber = "portNumber";

  def createNewExecutorStorageDto(executorHostId : Long, executorStorageTypeId : Long, storageDefinition : String, storageBasePath : String, storageFulllPath : String, isRunning : Int, portNumber : Int) : ExecutorStorageDto = {  
     val dto = new ExecutorStorageDto(0,0,new java.util.Date(),new java.util.Date(),executorHostId,executorStorageTypeId,storageDefinition,storageBasePath,storageFulllPath,isRunning,portNumber)   
    dto 
  } 

}

 
