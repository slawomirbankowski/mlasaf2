/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dto 
 
 
case class AlgorithmVersionColumnTypeDto ( 
     val algorithmVersionColumnTypeId : Long
     , val guid : Long
     , val insertedRowDate : java.util.Date
     , val lastUpdatedDate : java.util.Date
     , val algorithmVersionId : Long
     , val algorithmColumnTypeId : Long
     , val allowMultiple : Int
     , val allowEmpty : Int 
     ) extends BaseDto {  
   def tableName : String = {    "algorithmVersionColumnType";    }  
   def fields : String = {    "algorithmVersionColumnTypeId,guid,insertedRowDate,lastUpdatedDate,algorithmVersionId,algorithmColumnTypeId,allowMultiple,allowEmpty";    }  
   def pkFields : String = {    "algorithmVersionColumnTypeId";    }  
   def fkFields : String = {    "algorithmColumnTypeId,algorithmVersionId";    }  
   def nameField : String = {    "";    }  
 def getPk() : Long = {    algorithmVersionColumnTypeId  }  
 def getInsertedRowDate() : java.util.Date = {    insertedRowDate  }  
 def getLastUpdatedDate() : java.util.Date = {    lastUpdatedDate  }  
 def getGuid() : Long = {    guid  }  
 def toAnyArray() : Array[Any] = {    Array(algorithmVersionColumnTypeId,guid,insertedRowDate,lastUpdatedDate,algorithmVersionId,algorithmColumnTypeId,allowMultiple,allowEmpty)  }  
 def toStringArray() : Array[String] = {    Array(""+algorithmVersionColumnTypeId,""+guid,""+insertedRowDate,""+lastUpdatedDate,""+algorithmVersionId,""+algorithmColumnTypeId,""+allowMultiple,""+allowEmpty)   }  
 def toJson() : String = {   "{" + "\"algorithmVersionColumnTypeId\":\""+algorithmVersionColumnTypeId+"\""+","+"\"guid\":\""+guid+"\""+","+"\"insertedRowDate\":\""+insertedRowDate+"\""+","+"\"lastUpdatedDate\":\""+lastUpdatedDate+"\""+","+"\"algorithmVersionId\":\""+algorithmVersionId+"\""+","+"\"algorithmColumnTypeId\":\""+algorithmColumnTypeId+"\""+","+"\"allowMultiple\":\""+allowMultiple+"\""+","+"\"allowEmpty\":\""+allowEmpty+"\"" + "}"   }  
 def toFullString() : String = {    "algorithmVersionColumnTypeId:'"+algorithmVersionColumnTypeId+"'"+","+"guid:'"+guid+"'"+","+"insertedRowDate:'"+insertedRowDate+"'"+","+"lastUpdatedDate:'"+lastUpdatedDate+"'"+","+"algorithmVersionId:'"+algorithmVersionId+"'"+","+"algorithmColumnTypeId:'"+algorithmColumnTypeId+"'"+","+"allowMultiple:'"+allowMultiple+"'"+","+"allowEmpty:'"+allowEmpty+"'"   } 
   def getFieldValue(name : String) : Any = { 
    val ret = name match { 
    case "algorithmVersionColumnTypeId" => algorithmVersionColumnTypeId  
     case "guid" => guid  
     case "insertedRowDate" => insertedRowDate  
     case "lastUpdatedDate" => lastUpdatedDate  
     case "algorithmVersionId" => algorithmVersionId  
     case "algorithmColumnTypeId" => algorithmColumnTypeId  
     case "allowMultiple" => allowMultiple  
     case "allowEmpty" => allowEmpty   
    case _ => null 
    } 
    ret 
  } 
   def getFieldTypeName(name : String) : String = { 
    val ret = name match { 
    case "algorithmVersionColumnTypeId" => "Long"  
     case "guid" => "Long"  
     case "insertedRowDate" => "java.util.Date"  
     case "lastUpdatedDate" => "java.util.Date"  
     case "algorithmVersionId" => "Long"  
     case "algorithmColumnTypeId" => "Long"  
     case "allowMultiple" => "Int"  
     case "allowEmpty" => "Int"   
    case _ => "Object" 
    } 
    ret 
  } 
   def prepareInsert(connection : java.sql.Connection) : java.sql.PreparedStatement = {
     val stat = connection.prepareStatement("insert into algorithmVersionColumnType(guid,algorithmVersionId,algorithmColumnTypeId,allowMultiple,allowEmpty) values (?,?,?,?,?)", java.sql.Statement.RETURN_GENERATED_KEYS);
    stat.setObject(1, guid);
    stat.setObject(2, algorithmVersionId);
    stat.setObject(3, algorithmColumnTypeId);
    stat.setObject(4, allowMultiple);
    stat.setObject(5, allowEmpty);
    return stat; 
   } 
   def modify(algorithmVersionId : Long, algorithmColumnTypeId : Long, allowMultiple : Int, allowEmpty : Int) : AlgorithmVersionColumnTypeDto = {
    val dtoModified = new AlgorithmVersionColumnTypeDto(this.algorithmVersionColumnTypeId,this.guid,this.insertedRowDate,new java.util.Date(),algorithmVersionId,algorithmColumnTypeId,allowMultiple,allowEmpty);
    dtoModified
  }
 } 
object AlgorithmVersionColumnTypeDto { 
  val TABLE_NAME = "algorithmVersionColumnType"; 
   val FIELD_algorithmVersionColumnTypeId = "algorithmVersionColumnTypeId";
   val FIELD_guid = "guid";
   val FIELD_insertedRowDate = "insertedRowDate";
   val FIELD_lastUpdatedDate = "lastUpdatedDate";
   val FIELD_algorithmVersionId = "algorithmVersionId";
   val FIELD_algorithmColumnTypeId = "algorithmColumnTypeId";
   val FIELD_allowMultiple = "allowMultiple";
   val FIELD_allowEmpty = "allowEmpty";

  def createNewAlgorithmVersionColumnTypeDto(algorithmVersionId : Long, algorithmColumnTypeId : Long, allowMultiple : Int, allowEmpty : Int) : AlgorithmVersionColumnTypeDto = {  
     val dto = new AlgorithmVersionColumnTypeDto(0,0,new java.util.Date(),new java.util.Date(),algorithmVersionId,algorithmColumnTypeId,allowMultiple,allowEmpty)   
    dto 
  } 

}

 
