/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmScheduleSummaryDao extends DaoBase { 

  def getVAlgorithmScheduleSummarysList() : List[VAlgorithmScheduleSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleSummaryDto]= SQL("select * from vAlgorithmScheduleSummary").as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmScheduleSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmScheduleSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmScheduleSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmScheduleSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleSummaryFirst() : VAlgorithmScheduleSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleSummaryDto= SQL("select * from vAlgorithmScheduleSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleSummaryLast() : VAlgorithmScheduleSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleSummaryDto= SQL("select * from vAlgorithmScheduleSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmScheduleSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleSummaryDto]= SQL("select * from vAlgorithmScheduleSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleSummaryByGuid(guid : Long) : VAlgorithmScheduleSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleSummaryDto= SQL("select * from vAlgorithmScheduleSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementationId(colValue : Long) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmImplementationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleTypeId(colValue : Long) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmScheduleTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleName(colValue : String) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmScheduleName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsScheduled(colValue : Int) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where isScheduled = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIntervalValue(colValue : Long) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where intervalValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunInfo_count(colValue : Int) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmRunInfo_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleView_count(colValue : Int) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmScheduleView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleParam_count(colValue : Int) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmScheduleParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleColumn_count(colValue : Int) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmScheduleColumn_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_count(colValue : Int) : List[VAlgorithmScheduleSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleSummaryDto] = SQL("select * from vAlgorithmScheduleSummary where algorithmRun_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
