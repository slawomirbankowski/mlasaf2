/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceTypeParamDao extends DaoBase { 

  def getVSourceTypeParamsList() : List[VSourceTypeParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceTypeParamDto]= SQL("select * from vSourceTypeParam").as(anorm.Macro.namedParser[VSourceTypeParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceTypeParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceTypeParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVSourceTypeParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceTypeParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceTypeParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceTypeParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceTypeParamFirst() : VSourceTypeParamDto = {
   implicit val connection = getConnection();
   val dtos : VSourceTypeParamDto= SQL("select * from vSourceTypeParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceTypeParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceTypeParamLast() : VSourceTypeParamDto = {
   implicit val connection = getConnection();
   val dtos : VSourceTypeParamDto= SQL("select * from vSourceTypeParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceTypeParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceTypeParamsByField(fieldName : String, fieldValue : String) : List[VSourceTypeParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceTypeParamDto]= SQL("select * from vSourceTypeParam where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceTypeParamByGuid(guid : Long) : VSourceTypeParamDto = {
   implicit val connection = getConnection();
   val dtos : VSourceTypeParamDto= SQL("select * from vSourceTypeParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceTypeParamDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosBySourceTypeParamId(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceTypeParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceTypeId(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParamId(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceTypeName(colValue : String) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParamName(colValue : String) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsRequired(colValue : Int) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where isRequired = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParam_sourceParamId(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParam_sourceParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParam_guid(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParam_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParam_insertedRowDate(colValue : java.util.Date) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParam_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParam_lastUpdatedDate(colValue : java.util.Date) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParam_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParam_sourceParamName(colValue : String) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParam_sourceParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParam_sourceParamType(colValue : String) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParam_sourceParamType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParam_possibleValues(colValue : String) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceParam_possibleValues = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_sourceTypeId(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceType_sourceTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_guid(colValue : Long) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_insertedRowDate(colValue : java.util.Date) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_lastUpdatedDate(colValue : java.util.Date) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_sourceTypeName(colValue : String) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceType_sourceTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_sourceTypeClass(colValue : String) : List[VSourceTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeParamDto] = SQL("select * from vSourceTypeParam where sourceType_sourceTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
