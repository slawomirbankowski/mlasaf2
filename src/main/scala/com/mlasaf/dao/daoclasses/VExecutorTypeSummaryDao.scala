/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorTypeSummaryDao extends DaoBase { 

  def getVExecutorTypeSummarysList() : List[VExecutorTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorTypeSummaryDto]= SQL("select * from vExecutorTypeSummary").as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorTypeSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorTypeSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorTypeSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorTypeSummaryFirst() : VExecutorTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorTypeSummaryDto= SQL("select * from vExecutorTypeSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeSummaryLast() : VExecutorTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorTypeSummaryDto= SQL("select * from vExecutorTypeSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeSummarysByField(fieldName : String, fieldValue : String) : List[VExecutorTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorTypeSummaryDto]= SQL("select * from vExecutorTypeSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeSummaryByGuid(guid : Long) : VExecutorTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorTypeSummaryDto= SQL("select * from vExecutorTypeSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorTypeId(colValue : Long) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where executorTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorTypeName(colValue : String) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where executorTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorTypeClass(colValue : String) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where executorTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_count(colValue : Int) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where algorithmImplementation_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorTypeParam_count(colValue : Int) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where executorTypeParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorTypeHostParam_count(colValue : Int) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where executorTypeHostParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_count(colValue : Int) : List[VExecutorTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeSummaryDto] = SQL("select * from vExecutorTypeSummary where executorInstance_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
