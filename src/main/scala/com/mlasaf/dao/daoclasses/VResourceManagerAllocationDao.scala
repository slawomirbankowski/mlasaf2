/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VResourceManagerAllocationDao extends DaoBase { 

  def getVResourceManagerAllocationsList() : List[VResourceManagerAllocationDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerAllocationDto]= SQL("select * from vResourceManagerAllocation").as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerAllocationsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vResourceManagerAllocation").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVResourceManagerAllocationsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vResourceManagerAllocation").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagerAllocationsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vResourceManagerAllocation").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagerAllocationFirst() : VResourceManagerAllocationDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerAllocationDto= SQL("select * from vResourceManagerAllocation order by insertedRowDate asc ").as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerAllocationLast() : VResourceManagerAllocationDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerAllocationDto= SQL("select * from vResourceManagerAllocation order by insertedRowDate desc ").as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerAllocationsByField(fieldName : String, fieldValue : String) : List[VResourceManagerAllocationDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerAllocationDto]= SQL("select * from vResourceManagerAllocation where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerAllocationByGuid(guid : Long) : VResourceManagerAllocationDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerAllocationDto= SQL("select * from vResourceManagerAllocation where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByResourceManagerAllocationId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerAllocationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerTypeId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstanceId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasureId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceMeasureId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllocationValue(colValue : Double) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where allocationValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllocationValueMin(colValue : Double) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where allocationValueMin = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllocationValueMax(colValue : Double) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where allocationValueMax = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorInstanceId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_guid(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorTypeId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_executorTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorHostId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorContextId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorInstanceName(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_executorInstanceName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorDefinition(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_executorDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorParameters(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_executorParameters = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_isRunning(colValue : Int) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_isFinished(colValue : Int) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_portNumber(colValue : Int) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_endDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where executorInstance_endDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManager_resourceManagerId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_guid(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManager_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManager_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManager_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerTypeId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManager_resourceManagerTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_executorHostId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManager_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerStatus(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManager_resourceManagerStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_resourceMeasureId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceMeasure_resourceMeasureId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_guid(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceMeasure_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceMeasure_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceMeasure_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_resourceMeasureName(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceMeasure_resourceMeasureName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_resourceMeasureClass(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceMeasure_resourceMeasureClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_resourceManagerTypeId(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerType_resourceManagerTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_guid(colValue : Long) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_resourceManagerTypeName(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerType_resourceManagerTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_resourceManagerTypeClass(colValue : String) : List[VResourceManagerAllocationDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerAllocationDto] = SQL("select * from vResourceManagerAllocation where resourceManagerType_resourceManagerTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerAllocationDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
