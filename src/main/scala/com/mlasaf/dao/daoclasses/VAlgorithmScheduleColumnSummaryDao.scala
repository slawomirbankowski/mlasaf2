/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmScheduleColumnSummaryDao extends DaoBase { 

  def getVAlgorithmScheduleColumnSummarysList() : List[VAlgorithmScheduleColumnSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleColumnSummaryDto]= SQL("select * from vAlgorithmScheduleColumnSummary").as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleColumnSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmScheduleColumnSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmScheduleColumnSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmScheduleColumnSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleColumnSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmScheduleColumnSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleColumnSummaryFirst() : VAlgorithmScheduleColumnSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleColumnSummaryDto= SQL("select * from vAlgorithmScheduleColumnSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleColumnSummaryLast() : VAlgorithmScheduleColumnSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleColumnSummaryDto= SQL("select * from vAlgorithmScheduleColumnSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleColumnSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmScheduleColumnSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleColumnSummaryDto]= SQL("select * from vAlgorithmScheduleColumnSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleColumnSummaryByGuid(guid : Long) : VAlgorithmScheduleColumnSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleColumnSummaryDto= SQL("select * from vAlgorithmScheduleColumnSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmScheduleColumnId(colValue : Long) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where algorithmScheduleColumnId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnTypeId(colValue : Long) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where algorithmColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewId(colValue : Long) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where algorithmScheduleViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewId(colValue : Long) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewColumnId(colValue : Long) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where sourceViewColumnId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExtendedProperties(colValue : String) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where extendedProperties = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformColumn_count(colValue : Int) : List[VAlgorithmScheduleColumnSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleColumnSummaryDto] = SQL("select * from vAlgorithmScheduleColumnSummary where downloadTransformColumn_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleColumnSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
