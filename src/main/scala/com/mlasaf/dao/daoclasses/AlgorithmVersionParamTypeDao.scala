/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmVersionParamTypeDao extends DaoBase { 

  def getAlgorithmVersionParamTypesList() : List[AlgorithmVersionParamTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionParamTypeDto]= SQL("select * from algorithmVersionParamType").as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionParamTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmVersionParamType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmVersionParamTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmVersionParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionParamTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmVersionParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionParamTypeFirst() : AlgorithmVersionParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionParamTypeDto= SQL("select * from algorithmVersionParamType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionParamTypeLast() : AlgorithmVersionParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionParamTypeDto= SQL("select * from algorithmVersionParamType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionParamTypesByField(fieldName : String, fieldValue : String) : List[AlgorithmVersionParamTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionParamTypeDto]= SQL("select * from algorithmVersionParamType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionParamTypeByGuid(guid : Long) : AlgorithmVersionParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionParamTypeDto= SQL("select * from algorithmVersionParamType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmVersionParamTypeByPk(pkColValue : Long) : AlgorithmVersionParamTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmVersionParamTypeDto = SQL("select * from algorithmVersionParamType where algorithmVersionParamTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmVersionParamTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmVersionParamTypeId) as maxId from algorithmVersionParamType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmVersionParamTypeByFkAlgorithmParamId(fkColValue : Long) : List[AlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionParamTypeDto] = SQL("select * from algorithmVersionParamType where algorithmParamId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmVersionParamTypeByFkAlgorithmTypeId(fkColValue : Long) : List[AlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionParamTypeDto] = SQL("select * from algorithmVersionParamType where algorithmTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmVersionParamTypeByFkAlgorithmVersionId(fkColValue : Long) : List[AlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionParamTypeDto] = SQL("select * from algorithmVersionParamType where algorithmVersionId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertAlgorithmVersionParamTypeDto(dto : AlgorithmVersionParamTypeDto): AlgorithmVersionParamTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmVersionParamType where algorithmVersionParamTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmVersionParamTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmVersionParamTypeDto(algorithmParamId : Long, algorithmTypeId : Long, algorithmVersionId : Long) : AlgorithmVersionParamTypeDto = {
    val dto = new AlgorithmVersionParamTypeDto(0,0,new Date(),new Date(),algorithmParamId,algorithmTypeId,algorithmVersionId)
    insertAlgorithmVersionParamTypeDto(dto);   
  }   
  def updateAlgorithmVersionParamTypeDto(dto : AlgorithmVersionParamTypeDto): AlgorithmVersionParamTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmVersionParamType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmParamId = {algorithmParamId} ,  algorithmTypeId = {algorithmTypeId} ,  algorithmVersionId = {algorithmVersionId}  where  algorithmVersionParamTypeId = {algorithmVersionParamTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmParamId" -> dto.algorithmParamId , "algorithmTypeId" -> dto.algorithmTypeId , "algorithmVersionId" -> dto.algorithmVersionId, "algorithmVersionParamTypeId" -> dto.algorithmVersionParamTypeId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmVersionParamTypeByPk(dto.algorithmVersionParamTypeId) 
    } 

} 
