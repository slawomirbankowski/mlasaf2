/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorTypeParamDao extends DaoBase { 

  def getExecutorTypeParamsList() : List[ExecutorTypeParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorTypeParamDto]= SQL("select * from executorTypeParam").as(anorm.Macro.namedParser[ExecutorTypeParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorTypeParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorTypeParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorTypeParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorTypeParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorTypeParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorTypeParamFirst() : ExecutorTypeParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeParamDto= SQL("select * from executorTypeParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorTypeParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeParamLast() : ExecutorTypeParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeParamDto= SQL("select * from executorTypeParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorTypeParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeParamsByField(fieldName : String, fieldValue : String) : List[ExecutorTypeParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorTypeParamDto]= SQL("select * from executorTypeParam where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorTypeParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeParamByGuid(guid : Long) : ExecutorTypeParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeParamDto= SQL("select * from executorTypeParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorTypeParamDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorTypeParamByPk(pkColValue : Long) : ExecutorTypeParamDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorTypeParamDto = SQL("select * from executorTypeParam where executorTypeParamId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorTypeParamDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorTypeParamMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorTypeParamId) as maxId from executorTypeParam ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorTypeParamByFkExecutorParamId(fkColValue : Long) : List[ExecutorTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorTypeParamDto] = SQL("select * from executorTypeParam where executorParamId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorTypeParamByFkExecutorTypeId(fkColValue : Long) : List[ExecutorTypeParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorTypeParamDto] = SQL("select * from executorTypeParam where executorTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorTypeParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertExecutorTypeParamDto(dto : ExecutorTypeParamDto): ExecutorTypeParamDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorTypeParam where executorTypeParamId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorTypeParamDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorTypeParamDto(executorTypeId : Long, executorParamId : Long, IsMandatory : Int) : ExecutorTypeParamDto = {
    val dto = new ExecutorTypeParamDto(0,0,new Date(),new Date(),executorTypeId,executorParamId,IsMandatory)
    insertExecutorTypeParamDto(dto);   
  }   
  def updateExecutorTypeParamDto(dto : ExecutorTypeParamDto): ExecutorTypeParamDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorTypeParam set  lastUpdatedDate = {lastUpdatedDate} ,  executorTypeId = {executorTypeId} ,  executorParamId = {executorParamId} ,  IsMandatory = {IsMandatory}  where  executorTypeParamId = {executorTypeParamId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorTypeId" -> dto.executorTypeId , "executorParamId" -> dto.executorParamId , "IsMandatory" -> dto.IsMandatory, "executorTypeParamId" -> dto.executorTypeParamId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorTypeParamByPk(dto.executorTypeParamId) 
    } 

} 
