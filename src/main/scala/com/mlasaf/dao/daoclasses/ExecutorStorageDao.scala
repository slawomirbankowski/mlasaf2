/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorStorageDao extends DaoBase { 

  def getExecutorStoragesList() : List[ExecutorStorageDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorStorageDto]= SQL("select * from executorStorage").as(anorm.Macro.namedParser[ExecutorStorageDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorStoragesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorStorage").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorStoragesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorStorage").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorStoragesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorStorage").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorStorageFirst() : ExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageDto= SQL("select * from executorStorage order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorStorageDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageLast() : ExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageDto= SQL("select * from executorStorage order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorStorageDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorStoragesByField(fieldName : String, fieldValue : String) : List[ExecutorStorageDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorStorageDto]= SQL("select * from executorStorage where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorStorageDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageByGuid(guid : Long) : ExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageDto= SQL("select * from executorStorage where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorStorageDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorStorageByPk(pkColValue : Long) : ExecutorStorageDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorStorageDto = SQL("select * from executorStorage where executorStorageId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorStorageDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorStorageMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorStorageId) as maxId from executorStorage ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorStorageByFkExecutorHostId(fkColValue : Long) : List[ExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorStorageDto] = SQL("select * from executorStorage where executorHostId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorStorageDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorStorageByFkExecutorStorageTypeId(fkColValue : Long) : List[ExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorStorageDto] = SQL("select * from executorStorage where executorStorageTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorStorageDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertExecutorStorageDto(dto : ExecutorStorageDto): ExecutorStorageDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorStorage where executorStorageId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorStorageDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorStorageDto(executorHostId : Long, executorStorageTypeId : Long, storageDefinition : String, storageBasePath : String, storageFulllPath : String, isRunning : Int, portNumber : Int) : ExecutorStorageDto = {
    val dto = new ExecutorStorageDto(0,0,new Date(),new Date(),executorHostId,executorStorageTypeId,storageDefinition,storageBasePath,storageFulllPath,isRunning,portNumber)
    insertExecutorStorageDto(dto);   
  }   
  def updateExecutorStorageDto(dto : ExecutorStorageDto): ExecutorStorageDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorStorage set  lastUpdatedDate = {lastUpdatedDate} ,  executorHostId = {executorHostId} ,  executorStorageTypeId = {executorStorageTypeId} ,  storageDefinition = {storageDefinition} ,  storageBasePath = {storageBasePath} ,  storageFulllPath = {storageFulllPath} ,  isRunning = {isRunning} ,  portNumber = {portNumber}  where  executorStorageId = {executorStorageId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorHostId" -> dto.executorHostId , "executorStorageTypeId" -> dto.executorStorageTypeId , "storageDefinition" -> dto.storageDefinition , "storageBasePath" -> dto.storageBasePath , "storageFulllPath" -> dto.storageFulllPath , "isRunning" -> dto.isRunning , "portNumber" -> dto.portNumber, "executorStorageId" -> dto.executorStorageId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorStorageByPk(dto.executorStorageId) 
    } 

} 
