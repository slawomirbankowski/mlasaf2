/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmVersionOutputTypeDao extends DaoBase { 

  def getVAlgorithmVersionOutputTypesList() : List[VAlgorithmVersionOutputTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmVersionOutputTypeDto]= SQL("select * from vAlgorithmVersionOutputType").as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionOutputTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmVersionOutputType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmVersionOutputTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmVersionOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmVersionOutputTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmVersionOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmVersionOutputTypeFirst() : VAlgorithmVersionOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionOutputTypeDto= SQL("select * from vAlgorithmVersionOutputType order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionOutputTypeLast() : VAlgorithmVersionOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionOutputTypeDto= SQL("select * from vAlgorithmVersionOutputType order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionOutputTypesByField(fieldName : String, fieldValue : String) : List[VAlgorithmVersionOutputTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmVersionOutputTypeDto]= SQL("select * from vAlgorithmVersionOutputType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionOutputTypeByGuid(guid : Long) : VAlgorithmVersionOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionOutputTypeDto= SQL("select * from vAlgorithmVersionOutputType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmVersionOutputTypeId(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersionOutputTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersionId(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputTypeId(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmOutputTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsMandatory(colValue : Int) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where isMandatory = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsMultiple(colValue : Int) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where isMultiple = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_algorithmOutputTypeId(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmOutputType_algorithmOutputTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_guid(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmOutputType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmOutputType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmOutputType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_algorithmOutputTypeName(colValue : String) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmOutputType_algorithmOutputTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmVersionId(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersion_algorithmVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersion_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersion_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_guid(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersion_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmTypeId(colValue : Long) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersion_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmVersionName(colValue : String) : List[VAlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionOutputTypeDto] = SQL("select * from vAlgorithmVersionOutputType where algorithmVersion_algorithmVersionName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
