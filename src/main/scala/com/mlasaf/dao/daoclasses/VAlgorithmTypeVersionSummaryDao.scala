/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmTypeVersionSummaryDao extends DaoBase { 

  def getVAlgorithmTypeVersionSummarysList() : List[VAlgorithmTypeVersionSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeVersionSummaryDto]= SQL("select * from vAlgorithmTypeVersionSummary").as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmTypeVersionSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmTypeVersionSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmTypeVersionSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeVersionSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmTypeVersionSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeVersionSummaryFirst() : VAlgorithmTypeVersionSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeVersionSummaryDto= SQL("select * from vAlgorithmTypeVersionSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionSummaryLast() : VAlgorithmTypeVersionSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeVersionSummaryDto= SQL("select * from vAlgorithmTypeVersionSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmTypeVersionSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeVersionSummaryDto]= SQL("select * from vAlgorithmTypeVersionSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionSummaryByGuid(guid : Long) : VAlgorithmTypeVersionSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeVersionSummaryDto= SQL("select * from vAlgorithmTypeVersionSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmTypeVersionId(colValue : Long) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where algorithmTypeVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeId(colValue : Long) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersionName(colValue : String) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where algorithmTypeVersionName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamType_count(colValue : Int) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where algorithmParamType_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeColumnType_count(colValue : Int) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where algorithmTypeColumnType_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeOutputType_count(colValue : Int) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where algorithmTypeOutputType_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_count(colValue : Int) : List[VAlgorithmTypeVersionSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionSummaryDto] = SQL("select * from vAlgorithmTypeVersionSummary where algorithmImplementation_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
