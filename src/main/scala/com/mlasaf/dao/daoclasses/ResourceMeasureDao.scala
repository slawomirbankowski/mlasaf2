/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ResourceMeasureDao extends DaoBase { 

  def getResourceMeasuresList() : List[ResourceMeasureDto] = {
   implicit val connection = getConnection();
   val dtos : List[ResourceMeasureDto]= SQL("select * from resourceMeasure").as(anorm.Macro.namedParser[ResourceMeasureDto].*);
   releaseConnection(connection);
   dtos
  }
  def getResourceMeasuresCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from resourceMeasure").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getResourceMeasuresLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from resourceMeasure").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getResourceMeasuresLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from resourceMeasure").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getResourceMeasureFirst() : ResourceMeasureDto = {
   implicit val connection = getConnection();
   val dtos : ResourceMeasureDto= SQL("select * from resourceMeasure order by insertedRowDate asc ").as(anorm.Macro.namedParser[ResourceMeasureDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getResourceMeasureLast() : ResourceMeasureDto = {
   implicit val connection = getConnection();
   val dtos : ResourceMeasureDto= SQL("select * from resourceMeasure order by insertedRowDate desc ").as(anorm.Macro.namedParser[ResourceMeasureDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getResourceMeasuresByField(fieldName : String, fieldValue : String) : List[ResourceMeasureDto] = {
   implicit val connection = getConnection();
   val dtos : List[ResourceMeasureDto]= SQL("select * from resourceMeasure where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ResourceMeasureDto].*);
   releaseConnection(connection);
   dtos
  }
  def getResourceMeasureByGuid(guid : Long) : ResourceMeasureDto = {
   implicit val connection = getConnection();
   val dtos : ResourceMeasureDto= SQL("select * from resourceMeasure where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ResourceMeasureDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getResourceMeasureByPk(pkColValue : Long) : ResourceMeasureDto = { 
   implicit val connection = getConnection();  
   val dto : ResourceMeasureDto = SQL("select * from resourceMeasure where resourceMeasureId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ResourceMeasureDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getResourceMeasureMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(resourceMeasureId) as maxId from resourceMeasure ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getResourceMeasureByName(nameColValue : String) : List[ResourceMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ResourceMeasureDto] = SQL("select * from resourceMeasure where resourceMeasureName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ResourceMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getResourceMeasureFirstByName(nameColValue : String) : Option[ResourceMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ResourceMeasureDto] = SQL("select * from resourceMeasure where resourceMeasureName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ResourceMeasureDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertResourceMeasureDto(dto : ResourceMeasureDto): ResourceMeasureDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from resourceMeasure where resourceMeasureId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ResourceMeasureDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertResourceMeasureDto(resourceMeasureName : String, resourceMeasureClass : String) : ResourceMeasureDto = {
    val dto = new ResourceMeasureDto(0,0,new Date(),new Date(),resourceMeasureName,resourceMeasureClass)
    insertResourceMeasureDto(dto);   
  }   
  def updateResourceMeasureDto(dto : ResourceMeasureDto): ResourceMeasureDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update resourceMeasure set  lastUpdatedDate = {lastUpdatedDate} ,  resourceMeasureName = {resourceMeasureName} ,  resourceMeasureClass = {resourceMeasureClass}  where  resourceMeasureId = {resourceMeasureId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "resourceMeasureName" -> dto.resourceMeasureName , "resourceMeasureClass" -> dto.resourceMeasureClass, "resourceMeasureId" -> dto.resourceMeasureId ).executeInsert() 
   releaseConnection(connection);  
     getResourceMeasureByPk(dto.resourceMeasureId) 
    } 

} 
