/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmScheduleParamDao extends DaoBase { 

  def getVAlgorithmScheduleParamsList() : List[VAlgorithmScheduleParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleParamDto]= SQL("select * from vAlgorithmScheduleParam").as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmScheduleParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmScheduleParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmScheduleParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmScheduleParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleParamFirst() : VAlgorithmScheduleParamDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleParamDto= SQL("select * from vAlgorithmScheduleParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleParamLast() : VAlgorithmScheduleParamDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleParamDto= SQL("select * from vAlgorithmScheduleParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleParamsByField(fieldName : String, fieldValue : String) : List[VAlgorithmScheduleParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleParamDto]= SQL("select * from vAlgorithmScheduleParam where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleParamByGuid(guid : Long) : VAlgorithmScheduleParamDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleParamDto= SQL("select * from vAlgorithmScheduleParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmScheduleParamId(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmScheduleParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamId(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamValue(colValue : String) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParamValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamId(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParam_algorithmParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_guid(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParam_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParam_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParam_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamName(colValue : String) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParam_algorithmParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamDescription(colValue : String) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParam_algorithmParamDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamType(colValue : String) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmParam_algorithmParamType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_guid(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmImplementationId(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_algorithmImplementationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleTypeId(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_algorithmScheduleTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleName(colValue : String) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_algorithmScheduleName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isScheduled(colValue : Int) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_isScheduled = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_intervalValue(colValue : Long) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_intervalValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isRunning(colValue : Int) : List[VAlgorithmScheduleParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleParamDto] = SQL("select * from vAlgorithmScheduleParam where algorithmSchedule_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
