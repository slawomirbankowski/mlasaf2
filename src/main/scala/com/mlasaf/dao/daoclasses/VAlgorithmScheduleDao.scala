/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmScheduleDao extends DaoBase { 

  def getVAlgorithmSchedulesList() : List[VAlgorithmScheduleDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleDto]= SQL("select * from vAlgorithmSchedule").as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmSchedulesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmSchedule").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmSchedulesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmSchedule").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmSchedulesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmSchedule").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleFirst() : VAlgorithmScheduleDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleDto= SQL("select * from vAlgorithmSchedule order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleLast() : VAlgorithmScheduleDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleDto= SQL("select * from vAlgorithmSchedule order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmSchedulesByField(fieldName : String, fieldValue : String) : List[VAlgorithmScheduleDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleDto]= SQL("select * from vAlgorithmSchedule where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleByGuid(guid : Long) : VAlgorithmScheduleDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleDto= SQL("select * from vAlgorithmSchedule where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementationId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleTypeId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleName(colValue : String) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsScheduled(colValue : Int) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where isScheduled = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIntervalValue(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where intervalValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_algorithmImplementationId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_algorithmImplementationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_guid(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_algorithmTypeId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_algorithmVersionId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_algorithmVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_executorTypeId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_executorTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_algorithmImplementationName(colValue : String) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_algorithmImplementationName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_algorithmImplementationClass(colValue : String) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_algorithmImplementationClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_algorithmImplementationDescription(colValue : String) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmImplementation_algorithmImplementationDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleType_algorithmScheduleTypeId(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleType_algorithmScheduleTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleType_guid(colValue : Long) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleType_algorithmScheduleTypeName(colValue : String) : List[VAlgorithmScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleDto] = SQL("select * from vAlgorithmSchedule where algorithmScheduleType_algorithmScheduleTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
