/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmVersionParamTypeDao extends DaoBase { 

  def getVAlgorithmVersionParamTypesList() : List[VAlgorithmVersionParamTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmVersionParamTypeDto]= SQL("select * from vAlgorithmVersionParamType").as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionParamTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmVersionParamType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmVersionParamTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmVersionParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmVersionParamTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmVersionParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmVersionParamTypeFirst() : VAlgorithmVersionParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionParamTypeDto= SQL("select * from vAlgorithmVersionParamType order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionParamTypeLast() : VAlgorithmVersionParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionParamTypeDto= SQL("select * from vAlgorithmVersionParamType order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionParamTypesByField(fieldName : String, fieldValue : String) : List[VAlgorithmVersionParamTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmVersionParamTypeDto]= SQL("select * from vAlgorithmVersionParamType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionParamTypeByGuid(guid : Long) : VAlgorithmVersionParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionParamTypeDto= SQL("select * from vAlgorithmVersionParamType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmVersionParamTypeId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersionParamTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersionId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParam_algorithmParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_guid(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParam_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParam_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParam_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamName(colValue : String) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParam_algorithmParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamDescription(colValue : String) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParam_algorithmParamDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamType(colValue : String) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmParam_algorithmParamType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmType_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_guid(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeName(colValue : String) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmType_algorithmTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeDescription(colValue : String) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmType_algorithmTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmVersionId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersion_algorithmVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersion_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersion_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_guid(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersion_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmTypeId(colValue : Long) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersion_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmVersionName(colValue : String) : List[VAlgorithmVersionParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionParamTypeDto] = SQL("select * from vAlgorithmVersionParamType where algorithmVersion_algorithmVersionName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
