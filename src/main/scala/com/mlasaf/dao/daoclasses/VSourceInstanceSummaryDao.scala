/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceInstanceSummaryDao extends DaoBase { 

  def getVSourceInstanceSummarysList() : List[VSourceInstanceSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceInstanceSummaryDto]= SQL("select * from vSourceInstanceSummary").as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstanceSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceInstanceSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVSourceInstanceSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceInstanceSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceInstanceSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceInstanceSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceInstanceSummaryFirst() : VSourceInstanceSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceInstanceSummaryDto= SQL("select * from vSourceInstanceSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstanceSummaryLast() : VSourceInstanceSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceInstanceSummaryDto= SQL("select * from vSourceInstanceSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstanceSummarysByField(fieldName : String, fieldValue : String) : List[VSourceInstanceSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceInstanceSummaryDto]= SQL("select * from vSourceInstanceSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstanceSummaryByGuid(guid : Long) : VSourceInstanceSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceInstanceSummaryDto= SQL("select * from vSourceInstanceSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosBySourceInstanceId(colValue : Long) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where sourceInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceTypeId(colValue : Long) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where sourceTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstanceName(colValue : String) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where sourceInstanceName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByErrorCount(colValue : Long) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where errorCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCorrectCount(colValue : Long) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where correctCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastStatus(colValue : String) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where lastStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastConnectionDate(colValue : java.util.Date) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where lastConnectionDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParamValue_count(colValue : Int) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where sourceParamValue_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_count(colValue : Int) : List[VSourceInstanceSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceSummaryDto] = SQL("select * from vSourceInstanceSummary where sourceView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
