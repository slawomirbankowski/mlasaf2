/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorContextRuntimeDao extends DaoBase { 

  def getExecutorContextRuntimesList() : List[ExecutorContextRuntimeDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorContextRuntimeDto]= SQL("select * from executorContextRuntime").as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextRuntimesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorContextRuntime").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorContextRuntimesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorContextRuntime").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorContextRuntimesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorContextRuntime").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorContextRuntimeFirst() : ExecutorContextRuntimeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextRuntimeDto= SQL("select * from executorContextRuntime order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextRuntimeLast() : ExecutorContextRuntimeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextRuntimeDto= SQL("select * from executorContextRuntime order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextRuntimesByField(fieldName : String, fieldValue : String) : List[ExecutorContextRuntimeDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorContextRuntimeDto]= SQL("select * from executorContextRuntime where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextRuntimeByGuid(guid : Long) : ExecutorContextRuntimeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextRuntimeDto= SQL("select * from executorContextRuntime where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorContextRuntimeByPk(pkColValue : Long) : ExecutorContextRuntimeDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorContextRuntimeDto = SQL("select * from executorContextRuntime where executorContextRuntimeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorContextRuntimeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorContextRuntimeId) as maxId from executorContextRuntime ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorContextRuntimeByFkExecutorContextId(fkColValue : Long) : List[ExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorContextRuntimeDto] = SQL("select * from executorContextRuntime where executorContextId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorContextRuntimeByFkExecutorHostId(fkColValue : Long) : List[ExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorContextRuntimeDto] = SQL("select * from executorContextRuntime where executorHostId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertExecutorContextRuntimeDto(dto : ExecutorContextRuntimeDto): ExecutorContextRuntimeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorContextRuntime where executorContextRuntimeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorContextRuntimeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorContextRuntimeDto(executorHostId : Long, executorContextId : Long, availableProcessors : Double, freeMemory : Double, maxMemory : Double, totalMemory : Double, diskInfo : String, currentDiskFreeSpace : Double, allThreadsCount : Int, contextThreadsCount : Int, threadIds : String) : ExecutorContextRuntimeDto = {
    val dto = new ExecutorContextRuntimeDto(0,0,new Date(),new Date(),executorHostId,executorContextId,availableProcessors,freeMemory,maxMemory,totalMemory,diskInfo,currentDiskFreeSpace,allThreadsCount,contextThreadsCount,threadIds)
    insertExecutorContextRuntimeDto(dto);   
  }   
  def updateExecutorContextRuntimeDto(dto : ExecutorContextRuntimeDto): ExecutorContextRuntimeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorContextRuntime set  lastUpdatedDate = {lastUpdatedDate} ,  executorHostId = {executorHostId} ,  executorContextId = {executorContextId} ,  availableProcessors = {availableProcessors} ,  freeMemory = {freeMemory} ,  maxMemory = {maxMemory} ,  totalMemory = {totalMemory} ,  diskInfo = {diskInfo} ,  currentDiskFreeSpace = {currentDiskFreeSpace} ,  allThreadsCount = {allThreadsCount} ,  contextThreadsCount = {contextThreadsCount} ,  threadIds = {threadIds}  where  executorContextRuntimeId = {executorContextRuntimeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorHostId" -> dto.executorHostId , "executorContextId" -> dto.executorContextId , "availableProcessors" -> dto.availableProcessors , "freeMemory" -> dto.freeMemory , "maxMemory" -> dto.maxMemory , "totalMemory" -> dto.totalMemory , "diskInfo" -> dto.diskInfo , "currentDiskFreeSpace" -> dto.currentDiskFreeSpace , "allThreadsCount" -> dto.allThreadsCount , "contextThreadsCount" -> dto.contextThreadsCount , "threadIds" -> dto.threadIds, "executorContextRuntimeId" -> dto.executorContextRuntimeId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorContextRuntimeByPk(dto.executorContextRuntimeId) 
    } 

} 
