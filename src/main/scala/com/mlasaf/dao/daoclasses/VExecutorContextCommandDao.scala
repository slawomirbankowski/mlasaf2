/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorContextCommandDao extends DaoBase { 

  def getVExecutorContextCommandsList() : List[VExecutorContextCommandDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextCommandDto]= SQL("select * from vExecutorContextCommand").as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextCommandsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorContextCommand").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorContextCommandsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorContextCommand").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextCommandsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorContextCommand").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextCommandFirst() : VExecutorContextCommandDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextCommandDto= SQL("select * from vExecutorContextCommand order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorContextCommandDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextCommandLast() : VExecutorContextCommandDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextCommandDto= SQL("select * from vExecutorContextCommand order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorContextCommandDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextCommandsByField(fieldName : String, fieldValue : String) : List[VExecutorContextCommandDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextCommandDto]= SQL("select * from vExecutorContextCommand where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextCommandByGuid(guid : Long) : VExecutorContextCommandDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextCommandDto= SQL("select * from vExecutorContextCommand where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorContextCommandDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorContextCommandId(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContextCommandId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextId(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommandId(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorCommandId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsExecuted(colValue : Int) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where isExecuted = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCommandParam1(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where commandParam1 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCommandParam2(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where commandParam2 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCommandParam3(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where commandParam3 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCommandParam4(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where commandParam4 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCommandParam5(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where commandParam5 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResultStatus(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where resultStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_executorContextId(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_guid(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_insertedRowDate(colValue : java.util.Date) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_executorHostId(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_isWorking(colValue : Int) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_properties = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties2(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_properties2 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties3(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_properties3 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_entryParams(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorContext_entryParams = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommand_executorCommandId(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorCommand_executorCommandId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommand_guid(colValue : Long) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorCommand_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommand_insertedRowDate(colValue : java.util.Date) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorCommand_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommand_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorCommand_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommand_executorCommandName(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorCommand_executorCommandName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommand_executorCommandClass(colValue : String) : List[VExecutorContextCommandDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextCommandDto] = SQL("select * from vExecutorContextCommand where executorCommand_executorCommandClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextCommandDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
