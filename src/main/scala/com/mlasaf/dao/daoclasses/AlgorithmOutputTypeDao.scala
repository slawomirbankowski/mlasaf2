/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmOutputTypeDao extends DaoBase { 

  def getAlgorithmOutputTypesList() : List[AlgorithmOutputTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmOutputTypeDto]= SQL("select * from algorithmOutputType").as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmOutputTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmOutputType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmOutputTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmOutputTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmOutputTypeFirst() : AlgorithmOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmOutputTypeDto= SQL("select * from algorithmOutputType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmOutputTypeLast() : AlgorithmOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmOutputTypeDto= SQL("select * from algorithmOutputType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmOutputTypesByField(fieldName : String, fieldValue : String) : List[AlgorithmOutputTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmOutputTypeDto]= SQL("select * from algorithmOutputType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmOutputTypeByGuid(guid : Long) : AlgorithmOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmOutputTypeDto= SQL("select * from algorithmOutputType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmOutputTypeByPk(pkColValue : Long) : AlgorithmOutputTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmOutputTypeDto = SQL("select * from algorithmOutputType where algorithmOutputTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmOutputTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmOutputTypeId) as maxId from algorithmOutputType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmOutputTypeByName(nameColValue : String) : List[AlgorithmOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmOutputTypeDto] = SQL("select * from algorithmOutputType where algorithmOutputTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmOutputTypeFirstByName(nameColValue : String) : Option[AlgorithmOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmOutputTypeDto] = SQL("select * from algorithmOutputType where algorithmOutputTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertAlgorithmOutputTypeDto(dto : AlgorithmOutputTypeDto): AlgorithmOutputTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmOutputType where algorithmOutputTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmOutputTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmOutputTypeDto(algorithmOutputTypeName : String) : AlgorithmOutputTypeDto = {
    val dto = new AlgorithmOutputTypeDto(0,0,new Date(),new Date(),algorithmOutputTypeName)
    insertAlgorithmOutputTypeDto(dto);   
  }   
  def updateAlgorithmOutputTypeDto(dto : AlgorithmOutputTypeDto): AlgorithmOutputTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmOutputType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmOutputTypeName = {algorithmOutputTypeName}  where  algorithmOutputTypeId = {algorithmOutputTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmOutputTypeName" -> dto.algorithmOutputTypeName, "algorithmOutputTypeId" -> dto.algorithmOutputTypeId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmOutputTypeByPk(dto.algorithmOutputTypeId) 
    } 

} 
