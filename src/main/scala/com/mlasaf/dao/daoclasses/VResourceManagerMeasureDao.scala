/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VResourceManagerMeasureDao extends DaoBase { 

  def getVResourceManagerMeasuresList() : List[VResourceManagerMeasureDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerMeasureDto]= SQL("select * from vResourceManagerMeasure").as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerMeasuresCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vResourceManagerMeasure").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVResourceManagerMeasuresLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vResourceManagerMeasure").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagerMeasuresLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vResourceManagerMeasure").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagerMeasureFirst() : VResourceManagerMeasureDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerMeasureDto= SQL("select * from vResourceManagerMeasure order by insertedRowDate asc ").as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerMeasureLast() : VResourceManagerMeasureDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerMeasureDto= SQL("select * from vResourceManagerMeasure order by insertedRowDate desc ").as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerMeasuresByField(fieldName : String, fieldValue : String) : List[VResourceManagerMeasureDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerMeasureDto]= SQL("select * from vResourceManagerMeasure where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerMeasureByGuid(guid : Long) : VResourceManagerMeasureDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerMeasureDto= SQL("select * from vResourceManagerMeasure where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByResourceManagerMeasureId(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManagerMeasureId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerId(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManagerId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasureId(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceMeasureId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByMeasureString(colValue : String) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where measureString = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByMeasureValue(colValue : Double) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where measureValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerId(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManager_resourceManagerId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_guid(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManager_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManager_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManager_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerTypeId(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManager_resourceManagerTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_executorHostId(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManager_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerStatus(colValue : String) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceManager_resourceManagerStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_resourceMeasureId(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceMeasure_resourceMeasureId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_guid(colValue : Long) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceMeasure_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceMeasure_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceMeasure_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_resourceMeasureName(colValue : String) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceMeasure_resourceMeasureName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceMeasure_resourceMeasureClass(colValue : String) : List[VResourceManagerMeasureDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerMeasureDto] = SQL("select * from vResourceManagerMeasure where resourceMeasure_resourceMeasureClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerMeasureDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
