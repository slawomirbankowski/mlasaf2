/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorContextRuntimeDao extends DaoBase { 

  def getVExecutorContextRuntimesList() : List[VExecutorContextRuntimeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextRuntimeDto]= SQL("select * from vExecutorContextRuntime").as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextRuntimesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorContextRuntime").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorContextRuntimesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorContextRuntime").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextRuntimesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorContextRuntime").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextRuntimeFirst() : VExecutorContextRuntimeDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextRuntimeDto= SQL("select * from vExecutorContextRuntime order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextRuntimeLast() : VExecutorContextRuntimeDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextRuntimeDto= SQL("select * from vExecutorContextRuntime order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextRuntimesByField(fieldName : String, fieldValue : String) : List[VExecutorContextRuntimeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextRuntimeDto]= SQL("select * from vExecutorContextRuntime where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextRuntimeByGuid(guid : Long) : VExecutorContextRuntimeDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextRuntimeDto= SQL("select * from vExecutorContextRuntime where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorContextRuntimeId(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContextRuntimeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextId(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAvailableProcessors(colValue : Double) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where availableProcessors = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByFreeMemory(colValue : Double) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where freeMemory = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByMaxMemory(colValue : Double) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where maxMemory = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByTotalMemory(colValue : Double) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where totalMemory = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDiskInfo(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where diskInfo = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCurrentDiskFreeSpace(colValue : Double) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where currentDiskFreeSpace = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllThreadsCount(colValue : Int) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where allThreadsCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByContextThreadsCount(colValue : Int) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where contextThreadsCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByThreadIds(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where threadIds = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_executorContextId(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_guid(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_insertedRowDate(colValue : java.util.Date) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_executorHostId(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_isWorking(colValue : Int) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_properties = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties2(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_properties2 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties3(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_properties3 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_entryParams(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorContext_entryParams = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VExecutorContextRuntimeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextRuntimeDto] = SQL("select * from vExecutorContextRuntime where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextRuntimeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
