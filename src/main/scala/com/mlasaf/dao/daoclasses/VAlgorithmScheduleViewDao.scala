/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmScheduleViewDao extends DaoBase { 

  def getVAlgorithmScheduleViewsList() : List[VAlgorithmScheduleViewDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleViewDto]= SQL("select * from vAlgorithmScheduleView").as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmScheduleView").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmScheduleViewsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmScheduleView").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleViewsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmScheduleView").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleViewFirst() : VAlgorithmScheduleViewDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewDto= SQL("select * from vAlgorithmScheduleView order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewLast() : VAlgorithmScheduleViewDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewDto= SQL("select * from vAlgorithmScheduleView order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewsByField(fieldName : String, fieldValue : String) : List[VAlgorithmScheduleViewDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleViewDto]= SQL("select * from vAlgorithmScheduleView where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewByGuid(guid : Long) : VAlgorithmScheduleViewDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewDto= SQL("select * from vAlgorithmScheduleView where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmScheduleViewId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewTypeId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByJoinOnDefinition(colValue : String) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where joinOnDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_guid(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmImplementationId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_algorithmImplementationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleTypeId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_algorithmScheduleTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleName(colValue : String) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_algorithmScheduleName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isScheduled(colValue : Int) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_isScheduled = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_intervalValue(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_intervalValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isRunning(colValue : Int) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmSchedule_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewType_algorithmScheduleViewTypeId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleViewType_algorithmScheduleViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewType_guid(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleViewType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleViewType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleViewType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewType_algorithmScheduleViewTypeName(colValue : String) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where algorithmScheduleViewType_algorithmScheduleViewTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_guid(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceInstanceId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_sourceInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewTypeId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_sourceViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewFormatId(colValue : Long) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_sourceViewFormatId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewName(colValue : String) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_sourceViewName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewDefinition(colValue : String) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_sourceViewDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_isExisting(colValue : Int) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_isExisting = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_isCustom(colValue : Int) : List[VAlgorithmScheduleViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewDto] = SQL("select * from vAlgorithmScheduleView where sourceView_isCustom = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
