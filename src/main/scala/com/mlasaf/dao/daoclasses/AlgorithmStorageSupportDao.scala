/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmStorageSupportDao extends DaoBase { 

  def getAlgorithmStorageSupportsList() : List[AlgorithmStorageSupportDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmStorageSupportDto]= SQL("select * from algorithmStorageSupport").as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmStorageSupportsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmStorageSupport").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmStorageSupportsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmStorageSupport").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmStorageSupportsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmStorageSupport").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmStorageSupportFirst() : AlgorithmStorageSupportDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmStorageSupportDto= SQL("select * from algorithmStorageSupport order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmStorageSupportLast() : AlgorithmStorageSupportDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmStorageSupportDto= SQL("select * from algorithmStorageSupport order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmStorageSupportsByField(fieldName : String, fieldValue : String) : List[AlgorithmStorageSupportDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmStorageSupportDto]= SQL("select * from algorithmStorageSupport where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmStorageSupportByGuid(guid : Long) : AlgorithmStorageSupportDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmStorageSupportDto= SQL("select * from algorithmStorageSupport where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmStorageSupportByPk(pkColValue : Long) : AlgorithmStorageSupportDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmStorageSupportDto = SQL("select * from algorithmStorageSupport where algorithmStorageSupportId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmStorageSupportMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmStorageSupportId) as maxId from algorithmStorageSupport ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmStorageSupportByFkAlgorithmImplementationId(fkColValue : Long) : List[AlgorithmStorageSupportDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmStorageSupportDto] = SQL("select * from algorithmStorageSupport where algorithmImplementationId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmStorageSupportByFkExecutorStorageTypeId(fkColValue : Long) : List[AlgorithmStorageSupportDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmStorageSupportDto] = SQL("select * from algorithmStorageSupport where executorStorageTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertAlgorithmStorageSupportDto(dto : AlgorithmStorageSupportDto): AlgorithmStorageSupportDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmStorageSupport where algorithmStorageSupportId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmStorageSupportDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmStorageSupportDto(algorithmImplementationId : Long, executorStorageTypeId : Long, supportPriority : Int) : AlgorithmStorageSupportDto = {
    val dto = new AlgorithmStorageSupportDto(0,0,new Date(),new Date(),algorithmImplementationId,executorStorageTypeId,supportPriority)
    insertAlgorithmStorageSupportDto(dto);   
  }   
  def updateAlgorithmStorageSupportDto(dto : AlgorithmStorageSupportDto): AlgorithmStorageSupportDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmStorageSupport set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmImplementationId = {algorithmImplementationId} ,  executorStorageTypeId = {executorStorageTypeId} ,  supportPriority = {supportPriority}  where  algorithmStorageSupportId = {algorithmStorageSupportId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmImplementationId" -> dto.algorithmImplementationId , "executorStorageTypeId" -> dto.executorStorageTypeId , "supportPriority" -> dto.supportPriority, "algorithmStorageSupportId" -> dto.algorithmStorageSupportId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmStorageSupportByPk(dto.algorithmStorageSupportId) 
    } 

} 
