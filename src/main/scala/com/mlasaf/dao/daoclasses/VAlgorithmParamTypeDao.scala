/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmParamTypeDao extends DaoBase { 

  def getVAlgorithmParamTypesList() : List[VAlgorithmParamTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmParamTypeDto]= SQL("select * from vAlgorithmParamType").as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmParamType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmParamTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmParamTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmParamTypeFirst() : VAlgorithmParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmParamTypeDto= SQL("select * from vAlgorithmParamType order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamTypeLast() : VAlgorithmParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmParamTypeDto= SQL("select * from vAlgorithmParamType order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamTypesByField(fieldName : String, fieldValue : String) : List[VAlgorithmParamTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmParamTypeDto]= SQL("select * from vAlgorithmParamType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamTypeByGuid(guid : Long) : VAlgorithmParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmParamTypeDto= SQL("select * from vAlgorithmParamType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmParamTypeId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParamTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersionId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParam_algorithmParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_guid(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParam_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParam_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParam_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamName(colValue : String) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParam_algorithmParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamDescription(colValue : String) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParam_algorithmParamDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParam_algorithmParamType(colValue : String) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmParam_algorithmParamType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmType_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_guid(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeName(colValue : String) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmType_algorithmTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeDescription(colValue : String) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmType_algorithmTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_algorithmTypeVersionId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeVersion_algorithmTypeVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeVersion_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeVersion_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_guid(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeVersion_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_algorithmTypeId(colValue : Long) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeVersion_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_algorithmTypeVersionName(colValue : String) : List[VAlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamTypeDto] = SQL("select * from vAlgorithmParamType where algorithmTypeVersion_algorithmTypeVersionName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
