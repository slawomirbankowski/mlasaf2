/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorTypeHostParamDao extends DaoBase { 

  def getVExecutorTypeHostParamsList() : List[VExecutorTypeHostParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorTypeHostParamDto]= SQL("select * from vExecutorTypeHostParam").as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeHostParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorTypeHostParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorTypeHostParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorTypeHostParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorTypeHostParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorTypeHostParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorTypeHostParamFirst() : VExecutorTypeHostParamDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorTypeHostParamDto= SQL("select * from vExecutorTypeHostParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeHostParamLast() : VExecutorTypeHostParamDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorTypeHostParamDto= SQL("select * from vExecutorTypeHostParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeHostParamsByField(fieldName : String, fieldValue : String) : List[VExecutorTypeHostParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorTypeHostParamDto]= SQL("select * from vExecutorTypeHostParam where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorTypeHostParamByGuid(guid : Long) : VExecutorTypeHostParamDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorTypeHostParamDto= SQL("select * from vExecutorTypeHostParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorTypeHostParamId(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorTypeHostParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorTypeId(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParamId(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByParamValue(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where paramValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParam_executorParamId(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorParam_executorParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParam_guid(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorParam_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParam_insertedRowDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorParam_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParam_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorParam_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParam_executorParamName(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorParam_executorParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParam_executorParamDescription(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorParam_executorParamDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorType_executorTypeId(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorType_executorTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorType_guid(colValue : Long) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorType_insertedRowDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorType_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorType_executorTypeName(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorType_executorTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorType_executorTypeClass(colValue : String) : List[VExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorTypeHostParamDto] = SQL("select * from vExecutorTypeHostParam where executorType_executorTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
