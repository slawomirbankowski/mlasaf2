/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmVersionColumnTypeDao extends DaoBase { 

  def getAlgorithmVersionColumnTypesList() : List[AlgorithmVersionColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionColumnTypeDto]= SQL("select * from algorithmVersionColumnType").as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionColumnTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmVersionColumnType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmVersionColumnTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmVersionColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionColumnTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmVersionColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionColumnTypeFirst() : AlgorithmVersionColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionColumnTypeDto= SQL("select * from algorithmVersionColumnType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionColumnTypeLast() : AlgorithmVersionColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionColumnTypeDto= SQL("select * from algorithmVersionColumnType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionColumnTypesByField(fieldName : String, fieldValue : String) : List[AlgorithmVersionColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionColumnTypeDto]= SQL("select * from algorithmVersionColumnType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionColumnTypeByGuid(guid : Long) : AlgorithmVersionColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionColumnTypeDto= SQL("select * from algorithmVersionColumnType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmVersionColumnTypeByPk(pkColValue : Long) : AlgorithmVersionColumnTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmVersionColumnTypeDto = SQL("select * from algorithmVersionColumnType where algorithmVersionColumnTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmVersionColumnTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmVersionColumnTypeId) as maxId from algorithmVersionColumnType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmVersionColumnTypeByFkAlgorithmColumnTypeId(fkColValue : Long) : List[AlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionColumnTypeDto] = SQL("select * from algorithmVersionColumnType where algorithmColumnTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmVersionColumnTypeByFkAlgorithmVersionId(fkColValue : Long) : List[AlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionColumnTypeDto] = SQL("select * from algorithmVersionColumnType where algorithmVersionId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertAlgorithmVersionColumnTypeDto(dto : AlgorithmVersionColumnTypeDto): AlgorithmVersionColumnTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmVersionColumnType where algorithmVersionColumnTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmVersionColumnTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmVersionColumnTypeDto(algorithmVersionId : Long, algorithmColumnTypeId : Long, allowMultiple : Int, allowEmpty : Int) : AlgorithmVersionColumnTypeDto = {
    val dto = new AlgorithmVersionColumnTypeDto(0,0,new Date(),new Date(),algorithmVersionId,algorithmColumnTypeId,allowMultiple,allowEmpty)
    insertAlgorithmVersionColumnTypeDto(dto);   
  }   
  def updateAlgorithmVersionColumnTypeDto(dto : AlgorithmVersionColumnTypeDto): AlgorithmVersionColumnTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmVersionColumnType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmVersionId = {algorithmVersionId} ,  algorithmColumnTypeId = {algorithmColumnTypeId} ,  allowMultiple = {allowMultiple} ,  allowEmpty = {allowEmpty}  where  algorithmVersionColumnTypeId = {algorithmVersionColumnTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmVersionId" -> dto.algorithmVersionId , "algorithmColumnTypeId" -> dto.algorithmColumnTypeId , "allowMultiple" -> dto.allowMultiple , "allowEmpty" -> dto.allowEmpty, "algorithmVersionColumnTypeId" -> dto.algorithmVersionColumnTypeId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmVersionColumnTypeByPk(dto.algorithmVersionColumnTypeId) 
    } 

} 
