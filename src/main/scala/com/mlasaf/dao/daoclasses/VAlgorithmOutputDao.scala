/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmOutputDao extends DaoBase { 

  def getVAlgorithmOutputsList() : List[VAlgorithmOutputDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmOutputDto]= SQL("select * from vAlgorithmOutput").as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmOutputsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmOutput").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmOutputsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmOutput").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmOutputsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmOutput").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmOutputFirst() : VAlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmOutputDto= SQL("select * from vAlgorithmOutput order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmOutputDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmOutputLast() : VAlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmOutputDto= SQL("select * from vAlgorithmOutput order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmOutputDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmOutputsByField(fieldName : String, fieldValue : String) : List[VAlgorithmOutputDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmOutputDto]= SQL("select * from vAlgorithmOutput where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmOutputByGuid(guid : Long) : VAlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmOutputDto= SQL("select * from vAlgorithmOutput where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmOutputDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmOutputId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRunId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputTypeId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResourceId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResourceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_algorithmOutputTypeId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_algorithmOutputTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_guid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_algorithmOutputTypeName(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_algorithmOutputTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmRunId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_algorithmRunId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_guid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmScheduleId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_executorInstanceId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_executorStorageId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmRunTypeId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_algorithmRunTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmRunName(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_algorithmRunName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_runDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_runDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_runStatus(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_runStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_isError(colValue : Int) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_isError = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_errorDescription(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_errorDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_isRunning(colValue : Int) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_isFinished(colValue : Int) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRun_isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_guid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorHostId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageTypeId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageDefinition(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageBasePath(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageFulllPath(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_isRunning(colValue : Int) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_portNumber(colValue : Int) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorage_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_executorStorageResourceId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_executorStorageResourceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_guid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_executorStorageId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_resourcePath(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_resourcePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_resourceSize(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_resourceSize = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_resourceRowsCount(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_resourceRowsCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_isValid(colValue : Int) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageResource_isValid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
