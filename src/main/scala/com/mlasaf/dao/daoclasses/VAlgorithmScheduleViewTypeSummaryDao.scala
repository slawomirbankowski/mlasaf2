/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmScheduleViewTypeSummaryDao extends DaoBase { 

  def getVAlgorithmScheduleViewTypeSummarysList() : List[VAlgorithmScheduleViewTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto]= SQL("select * from vAlgorithmScheduleViewTypeSummary").as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewTypeSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmScheduleViewTypeSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmScheduleViewTypeSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmScheduleViewTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleViewTypeSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmScheduleViewTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleViewTypeSummaryFirst() : VAlgorithmScheduleViewTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewTypeSummaryDto= SQL("select * from vAlgorithmScheduleViewTypeSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewTypeSummaryLast() : VAlgorithmScheduleViewTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewTypeSummaryDto= SQL("select * from vAlgorithmScheduleViewTypeSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewTypeSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmScheduleViewTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto]= SQL("select * from vAlgorithmScheduleViewTypeSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewTypeSummaryByGuid(guid : Long) : VAlgorithmScheduleViewTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewTypeSummaryDto= SQL("select * from vAlgorithmScheduleViewTypeSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmScheduleViewTypeId(colValue : Long) : List[VAlgorithmScheduleViewTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto] = SQL("select * from vAlgorithmScheduleViewTypeSummary where algorithmScheduleViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmScheduleViewTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto] = SQL("select * from vAlgorithmScheduleViewTypeSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto] = SQL("select * from vAlgorithmScheduleViewTypeSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto] = SQL("select * from vAlgorithmScheduleViewTypeSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewTypeName(colValue : String) : List[VAlgorithmScheduleViewTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto] = SQL("select * from vAlgorithmScheduleViewTypeSummary where algorithmScheduleViewTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleView_count(colValue : Int) : List[VAlgorithmScheduleViewTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewTypeSummaryDto] = SQL("select * from vAlgorithmScheduleViewTypeSummary where algorithmScheduleView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
