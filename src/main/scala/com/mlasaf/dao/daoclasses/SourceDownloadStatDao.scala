/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class SourceDownloadStatDao extends DaoBase { 

  def getSourceDownloadStatsList() : List[SourceDownloadStatDto] = {
   implicit val connection = getConnection();
   val dtos : List[SourceDownloadStatDto]= SQL("select * from sourceDownloadStat").as(anorm.Macro.namedParser[SourceDownloadStatDto].*);
   releaseConnection(connection);
   dtos
  }
  def getSourceDownloadStatsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from sourceDownloadStat").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getSourceDownloadStatsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from sourceDownloadStat").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getSourceDownloadStatsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from sourceDownloadStat").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getSourceDownloadStatFirst() : SourceDownloadStatDto = {
   implicit val connection = getConnection();
   val dtos : SourceDownloadStatDto= SQL("select * from sourceDownloadStat order by insertedRowDate asc ").as(anorm.Macro.namedParser[SourceDownloadStatDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getSourceDownloadStatLast() : SourceDownloadStatDto = {
   implicit val connection = getConnection();
   val dtos : SourceDownloadStatDto= SQL("select * from sourceDownloadStat order by insertedRowDate desc ").as(anorm.Macro.namedParser[SourceDownloadStatDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getSourceDownloadStatsByField(fieldName : String, fieldValue : String) : List[SourceDownloadStatDto] = {
   implicit val connection = getConnection();
   val dtos : List[SourceDownloadStatDto]= SQL("select * from sourceDownloadStat where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[SourceDownloadStatDto].*);
   releaseConnection(connection);
   dtos
  }
  def getSourceDownloadStatByGuid(guid : Long) : SourceDownloadStatDto = {
   implicit val connection = getConnection();
   val dtos : SourceDownloadStatDto= SQL("select * from sourceDownloadStat where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[SourceDownloadStatDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getSourceDownloadStatByPk(pkColValue : Long) : SourceDownloadStatDto = { 
   implicit val connection = getConnection();  
   val dto : SourceDownloadStatDto = SQL("select * from sourceDownloadStat where sourceDownloadStatId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[SourceDownloadStatDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getSourceDownloadStatMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(sourceDownloadStatId) as maxId from sourceDownloadStat ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getSourceDownloadStatByFkSourceDownloadId(fkColValue : Long) : List[SourceDownloadStatDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[SourceDownloadStatDto] = SQL("select * from sourceDownloadStat where sourceDownloadId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[SourceDownloadStatDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertSourceDownloadStatDto(dto : SourceDownloadStatDto): SourceDownloadStatDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from sourceDownloadStat where sourceDownloadStatId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[SourceDownloadStatDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertSourceDownloadStatDto(sourceDownloadId : Long, rowsCount : Long, errorRowsCount : Long, totalBytesCount : Long, empryRowsCount : Long) : SourceDownloadStatDto = {
    val dto = new SourceDownloadStatDto(0,0,sourceDownloadId,new Date(),new Date(),rowsCount,errorRowsCount,totalBytesCount,empryRowsCount)
    insertSourceDownloadStatDto(dto);   
  }   
  def updateSourceDownloadStatDto(dto : SourceDownloadStatDto): SourceDownloadStatDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update sourceDownloadStat set  sourceDownloadId = {sourceDownloadId} ,  lastUpdatedDate = {lastUpdatedDate} ,  rowsCount = {rowsCount} ,  errorRowsCount = {errorRowsCount} ,  totalBytesCount = {totalBytesCount} ,  empryRowsCount = {empryRowsCount}  where  sourceDownloadStatId = {sourceDownloadStatId}  ")
      .on("sourceDownloadId" -> dto.sourceDownloadId , "lastUpdatedDate" -> dto.lastUpdatedDate , "rowsCount" -> dto.rowsCount , "errorRowsCount" -> dto.errorRowsCount , "totalBytesCount" -> dto.totalBytesCount , "empryRowsCount" -> dto.empryRowsCount, "sourceDownloadStatId" -> dto.sourceDownloadStatId ).executeInsert() 
   releaseConnection(connection);  
     getSourceDownloadStatByPk(dto.sourceDownloadStatId) 
    } 

} 
