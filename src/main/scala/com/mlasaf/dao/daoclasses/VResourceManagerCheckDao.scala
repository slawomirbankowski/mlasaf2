/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VResourceManagerCheckDao extends DaoBase { 

  def getVResourceManagerChecksList() : List[VResourceManagerCheckDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerCheckDto]= SQL("select * from vResourceManagerCheck").as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerChecksCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vResourceManagerCheck").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVResourceManagerChecksLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vResourceManagerCheck").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagerChecksLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vResourceManagerCheck").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagerCheckFirst() : VResourceManagerCheckDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerCheckDto= SQL("select * from vResourceManagerCheck order by insertedRowDate asc ").as(anorm.Macro.namedParser[VResourceManagerCheckDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerCheckLast() : VResourceManagerCheckDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerCheckDto= SQL("select * from vResourceManagerCheck order by insertedRowDate desc ").as(anorm.Macro.namedParser[VResourceManagerCheckDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerChecksByField(fieldName : String, fieldValue : String) : List[VResourceManagerCheckDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerCheckDto]= SQL("select * from vResourceManagerCheck where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerCheckByGuid(guid : Long) : VResourceManagerCheckDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerCheckDto= SQL("select * from vResourceManagerCheck where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VResourceManagerCheckDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByResourceManagerCheckId(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManagerCheckId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerId(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManagerId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerStatus(colValue : String) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManagerStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerId(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManager_resourceManagerId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_guid(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManager_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManager_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManager_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerTypeId(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManager_resourceManagerTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_executorHostId(colValue : Long) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManager_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManager_resourceManagerStatus(colValue : String) : List[VResourceManagerCheckDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerCheckDto] = SQL("select * from vResourceManagerCheck where resourceManager_resourceManagerStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerCheckDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
