/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorStorageSnapshotDao extends DaoBase { 

  def getExecutorStorageSnapshotsList() : List[ExecutorStorageSnapshotDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorStorageSnapshotDto]= SQL("select * from executorStorageSnapshot").as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageSnapshotsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorStorageSnapshot").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorStorageSnapshotsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorStorageSnapshot").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorStorageSnapshotsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorStorageSnapshot").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorStorageSnapshotFirst() : ExecutorStorageSnapshotDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageSnapshotDto= SQL("select * from executorStorageSnapshot order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageSnapshotLast() : ExecutorStorageSnapshotDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageSnapshotDto= SQL("select * from executorStorageSnapshot order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageSnapshotsByField(fieldName : String, fieldValue : String) : List[ExecutorStorageSnapshotDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorStorageSnapshotDto]= SQL("select * from executorStorageSnapshot where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageSnapshotByGuid(guid : Long) : ExecutorStorageSnapshotDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageSnapshotDto= SQL("select * from executorStorageSnapshot where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorStorageSnapshotByPk(pkColValue : Long) : ExecutorStorageSnapshotDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorStorageSnapshotDto = SQL("select * from executorStorageSnapshot where executorStorageSnapshotId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorStorageSnapshotMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorStorageSnapshotId) as maxId from executorStorageSnapshot ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorStorageSnapshotByFkExecutorInstanceId(fkColValue : Long) : List[ExecutorStorageSnapshotDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorStorageSnapshotDto] = SQL("select * from executorStorageSnapshot where executorInstanceId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertExecutorStorageSnapshotDto(dto : ExecutorStorageSnapshotDto): ExecutorStorageSnapshotDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorStorageSnapshot where executorStorageSnapshotId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorStorageSnapshotDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorStorageSnapshotDto(executorInstanceId : Long) : ExecutorStorageSnapshotDto = {
    val dto = new ExecutorStorageSnapshotDto(0,0,new Date(),new Date(),executorInstanceId)
    insertExecutorStorageSnapshotDto(dto);   
  }   
  def updateExecutorStorageSnapshotDto(dto : ExecutorStorageSnapshotDto): ExecutorStorageSnapshotDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorStorageSnapshot set  lastUpdatedDate = {lastUpdatedDate} ,  executorInstanceId = {executorInstanceId}  where  executorStorageSnapshotId = {executorStorageSnapshotId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorInstanceId" -> dto.executorInstanceId, "executorStorageSnapshotId" -> dto.executorStorageSnapshotId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorStorageSnapshotByPk(dto.executorStorageSnapshotId) 
    } 

} 
