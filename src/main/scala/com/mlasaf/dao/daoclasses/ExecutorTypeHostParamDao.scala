/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorTypeHostParamDao extends DaoBase { 

  def getExecutorTypeHostParamsList() : List[ExecutorTypeHostParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorTypeHostParamDto]= SQL("select * from executorTypeHostParam").as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeHostParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorTypeHostParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorTypeHostParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorTypeHostParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorTypeHostParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorTypeHostParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorTypeHostParamFirst() : ExecutorTypeHostParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeHostParamDto= SQL("select * from executorTypeHostParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeHostParamLast() : ExecutorTypeHostParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeHostParamDto= SQL("select * from executorTypeHostParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeHostParamsByField(fieldName : String, fieldValue : String) : List[ExecutorTypeHostParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorTypeHostParamDto]= SQL("select * from executorTypeHostParam where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeHostParamByGuid(guid : Long) : ExecutorTypeHostParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeHostParamDto= SQL("select * from executorTypeHostParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorTypeHostParamByPk(pkColValue : Long) : ExecutorTypeHostParamDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorTypeHostParamDto = SQL("select * from executorTypeHostParam where executorTypeHostParamId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorTypeHostParamMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorTypeHostParamId) as maxId from executorTypeHostParam ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorTypeHostParamByFkExecutorHostId(fkColValue : Long) : List[ExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorTypeHostParamDto] = SQL("select * from executorTypeHostParam where executorHostId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorTypeHostParamByFkExecutorParamId(fkColValue : Long) : List[ExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorTypeHostParamDto] = SQL("select * from executorTypeHostParam where executorParamId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorTypeHostParamByFkExecutorTypeId(fkColValue : Long) : List[ExecutorTypeHostParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorTypeHostParamDto] = SQL("select * from executorTypeHostParam where executorTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertExecutorTypeHostParamDto(dto : ExecutorTypeHostParamDto): ExecutorTypeHostParamDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorTypeHostParam where executorTypeHostParamId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorTypeHostParamDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorTypeHostParamDto(executorHostId : Long, executorTypeId : Long, executorParamId : Long, paramValue : String) : ExecutorTypeHostParamDto = {
    val dto = new ExecutorTypeHostParamDto(0,0,new Date(),new Date(),executorHostId,executorTypeId,executorParamId,paramValue)
    insertExecutorTypeHostParamDto(dto);   
  }   
  def updateExecutorTypeHostParamDto(dto : ExecutorTypeHostParamDto): ExecutorTypeHostParamDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorTypeHostParam set  lastUpdatedDate = {lastUpdatedDate} ,  executorHostId = {executorHostId} ,  executorTypeId = {executorTypeId} ,  executorParamId = {executorParamId} ,  paramValue = {paramValue}  where  executorTypeHostParamId = {executorTypeHostParamId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorHostId" -> dto.executorHostId , "executorTypeId" -> dto.executorTypeId , "executorParamId" -> dto.executorParamId , "paramValue" -> dto.paramValue, "executorTypeHostParamId" -> dto.executorTypeHostParamId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorTypeHostParamByPk(dto.executorTypeHostParamId) 
    } 

} 
