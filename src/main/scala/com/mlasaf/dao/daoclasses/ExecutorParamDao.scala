/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorParamDao extends DaoBase { 

  def getExecutorParamsList() : List[ExecutorParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorParamDto]= SQL("select * from executorParam").as(anorm.Macro.namedParser[ExecutorParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorParamFirst() : ExecutorParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorParamDto= SQL("select * from executorParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorParamLast() : ExecutorParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorParamDto= SQL("select * from executorParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorParamsByField(fieldName : String, fieldValue : String) : List[ExecutorParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorParamDto]= SQL("select * from executorParam where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorParamByGuid(guid : Long) : ExecutorParamDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorParamDto= SQL("select * from executorParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorParamDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorParamByPk(pkColValue : Long) : ExecutorParamDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorParamDto = SQL("select * from executorParam where executorParamId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorParamDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorParamMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorParamId) as maxId from executorParam ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorParamByName(nameColValue : String) : List[ExecutorParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorParamDto] = SQL("select * from executorParam where executorParamName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ExecutorParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorParamFirstByName(nameColValue : String) : Option[ExecutorParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorParamDto] = SQL("select * from executorParam where executorParamName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ExecutorParamDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertExecutorParamDto(dto : ExecutorParamDto): ExecutorParamDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorParam where executorParamId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorParamDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorParamDto(executorParamName : String, executorParamDescription : String) : ExecutorParamDto = {
    val dto = new ExecutorParamDto(0,0,new Date(),new Date(),executorParamName,executorParamDescription)
    insertExecutorParamDto(dto);   
  }   
  def updateExecutorParamDto(dto : ExecutorParamDto): ExecutorParamDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorParam set  lastUpdatedDate = {lastUpdatedDate} ,  executorParamName = {executorParamName} ,  executorParamDescription = {executorParamDescription}  where  executorParamId = {executorParamId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorParamName" -> dto.executorParamName , "executorParamDescription" -> dto.executorParamDescription, "executorParamId" -> dto.executorParamId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorParamByPk(dto.executorParamId) 
    } 

} 
