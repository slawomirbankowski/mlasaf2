/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmVersionDao extends DaoBase { 

  def getAlgorithmVersionsList() : List[AlgorithmVersionDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionDto]= SQL("select * from algorithmVersion").as(anorm.Macro.namedParser[AlgorithmVersionDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmVersion").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmVersionsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmVersion").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmVersion").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionFirst() : AlgorithmVersionDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionDto= SQL("select * from algorithmVersion order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmVersionDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionLast() : AlgorithmVersionDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionDto= SQL("select * from algorithmVersion order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmVersionDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionsByField(fieldName : String, fieldValue : String) : List[AlgorithmVersionDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionDto]= SQL("select * from algorithmVersion where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmVersionDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionByGuid(guid : Long) : AlgorithmVersionDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionDto= SQL("select * from algorithmVersion where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmVersionDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmVersionByPk(pkColValue : Long) : AlgorithmVersionDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmVersionDto = SQL("select * from algorithmVersion where algorithmVersionId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmVersionDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmVersionMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmVersionId) as maxId from algorithmVersion ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmVersionByFkAlgorithmTypeId(fkColValue : Long) : List[AlgorithmVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionDto] = SQL("select * from algorithmVersion where algorithmTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmVersionByName(nameColValue : String) : List[AlgorithmVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionDto] = SQL("select * from algorithmVersion where algorithmVersionName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmVersionFirstByName(nameColValue : String) : Option[AlgorithmVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionDto] = SQL("select * from algorithmVersion where algorithmVersionName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmVersionDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertAlgorithmVersionDto(dto : AlgorithmVersionDto): AlgorithmVersionDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmVersion where algorithmVersionId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmVersionDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmVersionDto(algorithmTypeId : Long, algorithmVersionName : String) : AlgorithmVersionDto = {
    val dto = new AlgorithmVersionDto(0,new Date(),new Date(),0,algorithmTypeId,algorithmVersionName)
    insertAlgorithmVersionDto(dto);   
  }   
  def updateAlgorithmVersionDto(dto : AlgorithmVersionDto): AlgorithmVersionDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmVersion set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmTypeId = {algorithmTypeId} ,  algorithmVersionName = {algorithmVersionName}  where  algorithmVersionId = {algorithmVersionId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmTypeId" -> dto.algorithmTypeId , "algorithmVersionName" -> dto.algorithmVersionName, "algorithmVersionId" -> dto.algorithmVersionId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmVersionByPk(dto.algorithmVersionId) 
    } 

} 
