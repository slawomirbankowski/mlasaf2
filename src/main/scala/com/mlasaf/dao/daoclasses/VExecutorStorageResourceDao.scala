/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorStorageResourceDao extends DaoBase { 

  def getVExecutorStorageResourcesList() : List[VExecutorStorageResourceDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorStorageResourceDto]= SQL("select * from vExecutorStorageResource").as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageResourcesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorStorageResource").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorStorageResourcesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorStorageResource").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorStorageResourcesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorStorageResource").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorStorageResourceFirst() : VExecutorStorageResourceDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageResourceDto= SQL("select * from vExecutorStorageResource order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageResourceLast() : VExecutorStorageResourceDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageResourceDto= SQL("select * from vExecutorStorageResource order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageResourcesByField(fieldName : String, fieldValue : String) : List[VExecutorStorageResourceDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorStorageResourceDto]= SQL("select * from vExecutorStorageResource where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageResourceByGuid(guid : Long) : VExecutorStorageResourceDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageResourceDto= SQL("select * from vExecutorStorageResource where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorStorageResourceId(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorageResourceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourcePath(colValue : String) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where resourcePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceSize(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where resourceSize = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceRowsCount(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where resourceRowsCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsValid(colValue : Int) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where isValid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageId(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_guid(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_insertedRowDate(colValue : java.util.Date) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorHostId(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageTypeId(colValue : Long) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageDefinition(colValue : String) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageBasePath(colValue : String) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageFulllPath(colValue : String) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_isRunning(colValue : Int) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_portNumber(colValue : Int) : List[VExecutorStorageResourceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageResourceDto] = SQL("select * from vExecutorStorageResource where executorStorage_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageResourceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
