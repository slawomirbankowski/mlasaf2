/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorRestCallDao extends DaoBase { 

  def getVExecutorRestCallsList() : List[VExecutorRestCallDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorRestCallDto]= SQL("select * from vExecutorRestCall").as(anorm.Macro.namedParser[VExecutorRestCallDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorRestCallsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorRestCall").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorRestCallsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorRestCall").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorRestCallsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorRestCall").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorRestCallFirst() : VExecutorRestCallDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorRestCallDto= SQL("select * from vExecutorRestCall order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorRestCallDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorRestCallLast() : VExecutorRestCallDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorRestCallDto= SQL("select * from vExecutorRestCall order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorRestCallDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorRestCallsByField(fieldName : String, fieldValue : String) : List[VExecutorRestCallDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorRestCallDto]= SQL("select * from vExecutorRestCall where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorRestCallByGuid(guid : Long) : VExecutorRestCallDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorRestCallDto= SQL("select * from vExecutorRestCall where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorRestCallDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorRestCallId(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRestCallId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRestId(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRestId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRequestMethod(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where requestMethod = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRequestHeader(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where requestHeader = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRequestBody(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where requestBody = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResponseBody(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where responseBody = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRunTime(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where runTime = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByHeaders(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where headers = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCookies(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where cookies = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByClientHost(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where clientHost = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByProtocol(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where protocol = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySession(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where session = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_executorRestId(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_executorRestId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_guid(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_insertedRowDate(colValue : java.util.Date) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_executorHostId(colValue : Long) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_restPort(colValue : Int) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_restPort = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_restVersion(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_restVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorRest_restStatus(colValue : String) : List[VExecutorRestCallDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestCallDto] = SQL("select * from vExecutorRestCall where executorRest_restStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestCallDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
