/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorTypeDao extends DaoBase { 

  def getExecutorTypesList() : List[ExecutorTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorTypeDto]= SQL("select * from executorType").as(anorm.Macro.namedParser[ExecutorTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorTypeFirst() : ExecutorTypeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeDto= SQL("select * from executorType order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeLast() : ExecutorTypeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeDto= SQL("select * from executorType order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypesByField(fieldName : String, fieldValue : String) : List[ExecutorTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorTypeDto]= SQL("select * from executorType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorTypeByGuid(guid : Long) : ExecutorTypeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorTypeDto= SQL("select * from executorType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorTypeByPk(pkColValue : Long) : ExecutorTypeDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorTypeDto = SQL("select * from executorType where executorTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorTypeId) as maxId from executorType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorTypeByName(nameColValue : String) : List[ExecutorTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorTypeDto] = SQL("select * from executorType where executorTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ExecutorTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorTypeFirstByName(nameColValue : String) : Option[ExecutorTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorTypeDto] = SQL("select * from executorType where executorTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ExecutorTypeDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertExecutorTypeDto(dto : ExecutorTypeDto): ExecutorTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorType where executorTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorTypeDto(executorTypeName : String, executorTypeClass : String) : ExecutorTypeDto = {
    val dto = new ExecutorTypeDto(0,0,new Date(),new Date(),executorTypeName,executorTypeClass)
    insertExecutorTypeDto(dto);   
  }   
  def updateExecutorTypeDto(dto : ExecutorTypeDto): ExecutorTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorType set  lastUpdatedDate = {lastUpdatedDate} ,  executorTypeName = {executorTypeName} ,  executorTypeClass = {executorTypeClass}  where  executorTypeId = {executorTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorTypeName" -> dto.executorTypeName , "executorTypeClass" -> dto.executorTypeClass, "executorTypeId" -> dto.executorTypeId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorTypeByPk(dto.executorTypeId) 
    } 

} 
