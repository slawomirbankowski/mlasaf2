/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ResourceManagerDao extends DaoBase { 

  def getResourceManagersList() : List[ResourceManagerDto] = {
   implicit val connection = getConnection();
   val dtos : List[ResourceManagerDto]= SQL("select * from resourceManager").as(anorm.Macro.namedParser[ResourceManagerDto].*);
   releaseConnection(connection);
   dtos
  }
  def getResourceManagersCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from resourceManager").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getResourceManagersLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from resourceManager").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getResourceManagersLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from resourceManager").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getResourceManagerFirst() : ResourceManagerDto = {
   implicit val connection = getConnection();
   val dtos : ResourceManagerDto= SQL("select * from resourceManager order by insertedRowDate asc ").as(anorm.Macro.namedParser[ResourceManagerDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getResourceManagerLast() : ResourceManagerDto = {
   implicit val connection = getConnection();
   val dtos : ResourceManagerDto= SQL("select * from resourceManager order by insertedRowDate desc ").as(anorm.Macro.namedParser[ResourceManagerDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getResourceManagersByField(fieldName : String, fieldValue : String) : List[ResourceManagerDto] = {
   implicit val connection = getConnection();
   val dtos : List[ResourceManagerDto]= SQL("select * from resourceManager where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ResourceManagerDto].*);
   releaseConnection(connection);
   dtos
  }
  def getResourceManagerByGuid(guid : Long) : ResourceManagerDto = {
   implicit val connection = getConnection();
   val dtos : ResourceManagerDto= SQL("select * from resourceManager where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ResourceManagerDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getResourceManagerByPk(pkColValue : Long) : ResourceManagerDto = { 
   implicit val connection = getConnection();  
   val dto : ResourceManagerDto = SQL("select * from resourceManager where resourceManagerId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ResourceManagerDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getResourceManagerMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(resourceManagerId) as maxId from resourceManager ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getResourceManagerByFkExecutorHostId(fkColValue : Long) : List[ResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ResourceManagerDto] = SQL("select * from resourceManager where executorHostId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getResourceManagerByFkResourceManagerTypeId(fkColValue : Long) : List[ResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ResourceManagerDto] = SQL("select * from resourceManager where resourceManagerTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertResourceManagerDto(dto : ResourceManagerDto): ResourceManagerDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from resourceManager where resourceManagerId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ResourceManagerDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertResourceManagerDto(resourceManagerTypeId : Long, executorHostId : Long, resourceManagerStatus : String) : ResourceManagerDto = {
    val dto = new ResourceManagerDto(0,0,new Date(),new Date(),resourceManagerTypeId,executorHostId,resourceManagerStatus)
    insertResourceManagerDto(dto);   
  }   
  def updateResourceManagerDto(dto : ResourceManagerDto): ResourceManagerDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update resourceManager set  lastUpdatedDate = {lastUpdatedDate} ,  resourceManagerTypeId = {resourceManagerTypeId} ,  executorHostId = {executorHostId} ,  resourceManagerStatus = {resourceManagerStatus}  where  resourceManagerId = {resourceManagerId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "resourceManagerTypeId" -> dto.resourceManagerTypeId , "executorHostId" -> dto.executorHostId , "resourceManagerStatus" -> dto.resourceManagerStatus, "resourceManagerId" -> dto.resourceManagerId ).executeInsert() 
   releaseConnection(connection);  
     getResourceManagerByPk(dto.resourceManagerId) 
    } 

} 
