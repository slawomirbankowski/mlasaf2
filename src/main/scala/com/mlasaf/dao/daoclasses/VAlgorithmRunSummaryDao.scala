/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmRunSummaryDao extends DaoBase { 

  def getVAlgorithmRunSummarysList() : List[VAlgorithmRunSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmRunSummaryDto]= SQL("select * from vAlgorithmRunSummary").as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmRunSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmRunSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmRunSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmRunSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmRunSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmRunSummaryFirst() : VAlgorithmRunSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunSummaryDto= SQL("select * from vAlgorithmRunSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunSummaryLast() : VAlgorithmRunSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunSummaryDto= SQL("select * from vAlgorithmRunSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmRunSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmRunSummaryDto]= SQL("select * from vAlgorithmRunSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunSummaryByGuid(guid : Long) : VAlgorithmRunSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunSummaryDto= SQL("select * from vAlgorithmRunSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmRunId(colValue : Long) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where algorithmRunId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstanceId(colValue : Long) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunTypeId(colValue : Long) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where algorithmRunTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunName(colValue : String) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where algorithmRunName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRunDate(colValue : java.util.Date) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where runDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRunStatus(colValue : String) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where runStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsError(colValue : Int) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where isError = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByErrorDescription(colValue : String) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where errorDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsFinished(colValue : Int) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunInfo_count(colValue : Int) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where algorithmRunInfo_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunView_count(colValue : Int) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where algorithmRunView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmOutput_count(colValue : Int) : List[VAlgorithmRunSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunSummaryDto] = SQL("select * from vAlgorithmRunSummary where algorithmOutput_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
