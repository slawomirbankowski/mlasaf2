/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceViewDao extends DaoBase { 

  def getVSourceViewsList() : List[VSourceViewDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceViewDto]= SQL("select * from vSourceView").as(anorm.Macro.namedParser[VSourceViewDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceViewsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceView").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVSourceViewsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceView").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceViewsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceView").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceViewFirst() : VSourceViewDto = {
   implicit val connection = getConnection();
   val dtos : VSourceViewDto= SQL("select * from vSourceView order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceViewDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceViewLast() : VSourceViewDto = {
   implicit val connection = getConnection();
   val dtos : VSourceViewDto= SQL("select * from vSourceView order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceViewDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceViewsByField(fieldName : String, fieldValue : String) : List[VSourceViewDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceViewDto]= SQL("select * from vSourceView where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VSourceViewDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceViewByGuid(guid : Long) : VSourceViewDto = {
   implicit val connection = getConnection();
   val dtos : VSourceViewDto= SQL("select * from vSourceView where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceViewDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosBySourceViewId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstanceId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewTypeId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewFormatId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewFormatId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewName(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewDefinition(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsExisting(colValue : Int) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where isExisting = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsCustom(colValue : Int) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where isCustom = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_sourceInstanceId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_sourceInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_guid(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_insertedRowDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_lastUpdatedDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_sourceTypeId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_sourceTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_sourceInstanceName(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_sourceInstanceName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_errorCount(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_errorCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_correctCount(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_correctCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_lastStatus(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_lastStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstance_lastConnectionDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceInstance_lastConnectionDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewFormat_sourceViewFormatId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewFormat_sourceViewFormatId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewFormat_guid(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewFormat_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewFormat_insertedRowDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewFormat_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewFormat_lastUpdatedDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewFormat_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewFormat_sourceViewFormatName(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewFormat_sourceViewFormatName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewFormat_sourceViewFormatClass(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewFormat_sourceViewFormatClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewType_sourceViewTypeId(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewType_sourceViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewType_guid(colValue : Long) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewType_insertedRowDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewType_lastUpdatedDate(colValue : java.util.Date) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewType_sourceViewTypeName(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewType_sourceViewTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewType_sourceViewTypeClass(colValue : String) : List[VSourceViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceViewDto] = SQL("select * from vSourceView where sourceViewType_sourceViewTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceViewDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
