/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VResourceManagerDao extends DaoBase { 

  def getVResourceManagersList() : List[VResourceManagerDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerDto]= SQL("select * from vResourceManager").as(anorm.Macro.namedParser[VResourceManagerDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagersCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vResourceManager").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVResourceManagersLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vResourceManager").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagersLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vResourceManager").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVResourceManagerFirst() : VResourceManagerDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerDto= SQL("select * from vResourceManager order by insertedRowDate asc ").as(anorm.Macro.namedParser[VResourceManagerDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerLast() : VResourceManagerDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerDto= SQL("select * from vResourceManager order by insertedRowDate desc ").as(anorm.Macro.namedParser[VResourceManagerDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagersByField(fieldName : String, fieldValue : String) : List[VResourceManagerDto] = {
   implicit val connection = getConnection();
   val dtos : List[VResourceManagerDto]= SQL("select * from vResourceManager where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVResourceManagerByGuid(guid : Long) : VResourceManagerDto = {
   implicit val connection = getConnection();
   val dtos : VResourceManagerDto= SQL("select * from vResourceManager where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VResourceManagerDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByResourceManagerId(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerTypeId(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerStatus(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_resourceManagerTypeId(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerType_resourceManagerTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_guid(colValue : Long) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_insertedRowDate(colValue : java.util.Date) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_lastUpdatedDate(colValue : java.util.Date) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_resourceManagerTypeName(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerType_resourceManagerTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByResourceManagerType_resourceManagerTypeClass(colValue : String) : List[VResourceManagerDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VResourceManagerDto] = SQL("select * from vResourceManager where resourceManagerType_resourceManagerTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VResourceManagerDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
