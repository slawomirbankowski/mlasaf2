/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorParamSummaryDao extends DaoBase { 

  def getVExecutorParamSummarysList() : List[VExecutorParamSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorParamSummaryDto]= SQL("select * from vExecutorParamSummary").as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorParamSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorParamSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorParamSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorParamSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorParamSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorParamSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorParamSummaryFirst() : VExecutorParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorParamSummaryDto= SQL("select * from vExecutorParamSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorParamSummaryLast() : VExecutorParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorParamSummaryDto= SQL("select * from vExecutorParamSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorParamSummarysByField(fieldName : String, fieldValue : String) : List[VExecutorParamSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorParamSummaryDto]= SQL("select * from vExecutorParamSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorParamSummaryByGuid(guid : Long) : VExecutorParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorParamSummaryDto= SQL("select * from vExecutorParamSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorParamId(colValue : Long) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where executorParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParamName(colValue : String) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where executorParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorParamDescription(colValue : String) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where executorParamDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorTypeParam_count(colValue : Int) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where executorTypeParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorTypeHostParam_count(colValue : Int) : List[VExecutorParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorParamSummaryDto] = SQL("select * from vExecutorParamSummary where executorTypeHostParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
