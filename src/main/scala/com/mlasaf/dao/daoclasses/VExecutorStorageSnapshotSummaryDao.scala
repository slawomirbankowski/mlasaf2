/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorStorageSnapshotSummaryDao extends DaoBase { 

  def getVExecutorStorageSnapshotSummarysList() : List[VExecutorStorageSnapshotSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorStorageSnapshotSummaryDto]= SQL("select * from vExecutorStorageSnapshotSummary").as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageSnapshotSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorStorageSnapshotSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorStorageSnapshotSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorStorageSnapshotSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorStorageSnapshotSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorStorageSnapshotSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorStorageSnapshotSummaryFirst() : VExecutorStorageSnapshotSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageSnapshotSummaryDto= SQL("select * from vExecutorStorageSnapshotSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageSnapshotSummaryLast() : VExecutorStorageSnapshotSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageSnapshotSummaryDto= SQL("select * from vExecutorStorageSnapshotSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageSnapshotSummarysByField(fieldName : String, fieldValue : String) : List[VExecutorStorageSnapshotSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorStorageSnapshotSummaryDto]= SQL("select * from vExecutorStorageSnapshotSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorStorageSnapshotSummaryByGuid(guid : Long) : VExecutorStorageSnapshotSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageSnapshotSummaryDto= SQL("select * from vExecutorStorageSnapshotSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorStorageSnapshotId(colValue : Long) : List[VExecutorStorageSnapshotSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSnapshotSummaryDto] = SQL("select * from vExecutorStorageSnapshotSummary where executorStorageSnapshotId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorStorageSnapshotSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSnapshotSummaryDto] = SQL("select * from vExecutorStorageSnapshotSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorStorageSnapshotSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSnapshotSummaryDto] = SQL("select * from vExecutorStorageSnapshotSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageSnapshotSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSnapshotSummaryDto] = SQL("select * from vExecutorStorageSnapshotSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstanceId(colValue : Long) : List[VExecutorStorageSnapshotSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSnapshotSummaryDto] = SQL("select * from vExecutorStorageSnapshotSummary where executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageView_count(colValue : Int) : List[VExecutorStorageSnapshotSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSnapshotSummaryDto] = SQL("select * from vExecutorStorageSnapshotSummary where executorStorageView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSnapshotSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
