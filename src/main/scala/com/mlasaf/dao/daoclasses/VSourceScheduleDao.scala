/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceScheduleDao extends DaoBase { 

  def getVSourceSchedulesList() : List[VSourceScheduleDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceScheduleDto]= SQL("select * from vSourceSchedule").as(anorm.Macro.namedParser[VSourceScheduleDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceSchedulesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceSchedule").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVSourceSchedulesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceSchedule").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceSchedulesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceSchedule").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceScheduleFirst() : VSourceScheduleDto = {
   implicit val connection = getConnection();
   val dtos : VSourceScheduleDto= SQL("select * from vSourceSchedule order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceScheduleDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceScheduleLast() : VSourceScheduleDto = {
   implicit val connection = getConnection();
   val dtos : VSourceScheduleDto= SQL("select * from vSourceSchedule order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceScheduleDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceSchedulesByField(fieldName : String, fieldValue : String) : List[VSourceScheduleDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceScheduleDto]= SQL("select * from vSourceSchedule where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceScheduleByGuid(guid : Long) : VSourceScheduleDto = {
   implicit val connection = getConnection();
   val dtos : VSourceScheduleDto= SQL("select * from vSourceSchedule where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceScheduleDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosBySourceScheduleId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroupId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where downloadTransformGroupId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByOnDemand(colValue : Int) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where onDemand = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByStartTime(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where startTime = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIntervalValue(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where intervalValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsScheduled(colValue : Int) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where isScheduled = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDeleteOldCopies(colValue : Int) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where deleteOldCopies = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_downloadTransformGroupId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where downloadTransformGroup_downloadTransformGroupId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_guid(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where downloadTransformGroup_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_insertedRowDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where downloadTransformGroup_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_lastUpdatedDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where downloadTransformGroup_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_downloadTransformGroupName(colValue : String) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where downloadTransformGroup_downloadTransformGroupName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_downloadTransformGroupDescription(colValue : String) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where downloadTransformGroup_downloadTransformGroupDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_guid(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_insertedRowDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_lastUpdatedDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorHostId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageTypeId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageDefinition(colValue : String) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageBasePath(colValue : String) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageFulllPath(colValue : String) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_isRunning(colValue : Int) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_portNumber(colValue : Int) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where executorStorage_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_guid(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_insertedRowDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_lastUpdatedDate(colValue : java.util.Date) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceInstanceId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_sourceInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewTypeId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_sourceViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewFormatId(colValue : Long) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_sourceViewFormatId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewName(colValue : String) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_sourceViewName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewDefinition(colValue : String) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_sourceViewDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_isExisting(colValue : Int) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_isExisting = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceView_isCustom(colValue : Int) : List[VSourceScheduleDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceScheduleDto] = SQL("select * from vSourceSchedule where sourceView_isCustom = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceScheduleDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
