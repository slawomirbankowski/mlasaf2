/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorContextSummaryDao extends DaoBase { 

  def getVExecutorContextSummarysList() : List[VExecutorContextSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextSummaryDto]= SQL("select * from vExecutorContextSummary").as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorContextSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorContextSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorContextSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorContextSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextSummaryFirst() : VExecutorContextSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextSummaryDto= SQL("select * from vExecutorContextSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextSummaryLast() : VExecutorContextSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextSummaryDto= SQL("select * from vExecutorContextSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextSummarysByField(fieldName : String, fieldValue : String) : List[VExecutorContextSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextSummaryDto]= SQL("select * from vExecutorContextSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextSummaryByGuid(guid : Long) : VExecutorContextSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextSummaryDto= SQL("select * from vExecutorContextSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorContextId(colValue : Long) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsWorking(colValue : Int) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByProperties(colValue : String) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where properties = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByProperties2(colValue : String) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where properties2 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByProperties3(colValue : String) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where properties3 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByEntryParams(colValue : String) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where entryParams = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceDownload_count(colValue : Int) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where sourceDownload_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextState_count(colValue : Int) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where executorContextState_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextThread_count(colValue : Int) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where executorContextThread_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextCommand_count(colValue : Int) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where executorContextCommand_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextRuntime_count(colValue : Int) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where executorContextRuntime_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_count(colValue : Int) : List[VExecutorContextSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextSummaryDto] = SQL("select * from vExecutorContextSummary where executorInstance_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
