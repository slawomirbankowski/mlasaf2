/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmVersionColumnTypeDao extends DaoBase { 

  def getVAlgorithmVersionColumnTypesList() : List[VAlgorithmVersionColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmVersionColumnTypeDto]= SQL("select * from vAlgorithmVersionColumnType").as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionColumnTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmVersionColumnType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmVersionColumnTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmVersionColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmVersionColumnTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmVersionColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmVersionColumnTypeFirst() : VAlgorithmVersionColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionColumnTypeDto= SQL("select * from vAlgorithmVersionColumnType order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionColumnTypeLast() : VAlgorithmVersionColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionColumnTypeDto= SQL("select * from vAlgorithmVersionColumnType order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionColumnTypesByField(fieldName : String, fieldValue : String) : List[VAlgorithmVersionColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmVersionColumnTypeDto]= SQL("select * from vAlgorithmVersionColumnType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmVersionColumnTypeByGuid(guid : Long) : VAlgorithmVersionColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmVersionColumnTypeDto= SQL("select * from vAlgorithmVersionColumnType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmVersionColumnTypeId(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersionColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersionId(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnTypeId(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllowMultiple(colValue : Int) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where allowMultiple = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllowEmpty(colValue : Int) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where allowEmpty = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_algorithmColumnTypeId(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_algorithmColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_guid(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_algorithmColumnTypeName(colValue : String) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_algorithmColumnTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_algorithmColumnTypeDescription(colValue : String) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_algorithmColumnTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_verificationClassName(colValue : String) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_verificationClassName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_verificationDefinition(colValue : String) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmColumnType_verificationDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmVersionId(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersion_algorithmVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersion_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersion_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_guid(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersion_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmTypeId(colValue : Long) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersion_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_algorithmVersionName(colValue : String) : List[VAlgorithmVersionColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmVersionColumnTypeDto] = SQL("select * from vAlgorithmVersionColumnType where algorithmVersion_algorithmVersionName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmVersionColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
