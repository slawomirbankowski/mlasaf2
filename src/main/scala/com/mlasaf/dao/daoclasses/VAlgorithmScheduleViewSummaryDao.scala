/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmScheduleViewSummaryDao extends DaoBase { 

  def getVAlgorithmScheduleViewSummarysList() : List[VAlgorithmScheduleViewSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleViewSummaryDto]= SQL("select * from vAlgorithmScheduleViewSummary").as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmScheduleViewSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmScheduleViewSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmScheduleViewSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleViewSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmScheduleViewSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmScheduleViewSummaryFirst() : VAlgorithmScheduleViewSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewSummaryDto= SQL("select * from vAlgorithmScheduleViewSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewSummaryLast() : VAlgorithmScheduleViewSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewSummaryDto= SQL("select * from vAlgorithmScheduleViewSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmScheduleViewSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmScheduleViewSummaryDto]= SQL("select * from vAlgorithmScheduleViewSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmScheduleViewSummaryByGuid(guid : Long) : VAlgorithmScheduleViewSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmScheduleViewSummaryDto= SQL("select * from vAlgorithmScheduleViewSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmScheduleViewId(colValue : Long) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where algorithmScheduleViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleViewTypeId(colValue : Long) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where algorithmScheduleViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceViewId(colValue : Long) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByJoinOnDefinition(colValue : String) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where joinOnDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunView_count(colValue : Int) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where algorithmRunView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformAlgorithmSchedule_count(colValue : Int) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where downloadTransformAlgorithmSchedule_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleColumn_count(colValue : Int) : List[VAlgorithmScheduleViewSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmScheduleViewSummaryDto] = SQL("select * from vAlgorithmScheduleViewSummary where algorithmScheduleColumn_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmScheduleViewSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
