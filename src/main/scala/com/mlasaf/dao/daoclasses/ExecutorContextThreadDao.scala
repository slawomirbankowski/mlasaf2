/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorContextThreadDao extends DaoBase { 

  def getExecutorContextThreadsList() : List[ExecutorContextThreadDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorContextThreadDto]= SQL("select * from executorContextThread").as(anorm.Macro.namedParser[ExecutorContextThreadDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextThreadsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorContextThread").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorContextThreadsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorContextThread").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorContextThreadsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorContextThread").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorContextThreadFirst() : ExecutorContextThreadDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextThreadDto= SQL("select * from executorContextThread order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorContextThreadDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextThreadLast() : ExecutorContextThreadDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextThreadDto= SQL("select * from executorContextThread order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorContextThreadDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextThreadsByField(fieldName : String, fieldValue : String) : List[ExecutorContextThreadDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorContextThreadDto]= SQL("select * from executorContextThread where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorContextThreadDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorContextThreadByGuid(guid : Long) : ExecutorContextThreadDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextThreadDto= SQL("select * from executorContextThread where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorContextThreadDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorContextThreadByPk(pkColValue : Long) : ExecutorContextThreadDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorContextThreadDto = SQL("select * from executorContextThread where executorContextThreadId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorContextThreadDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorContextThreadMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorContextThreadId) as maxId from executorContextThread ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorContextThreadByFkExecutorContextId(fkColValue : Long) : List[ExecutorContextThreadDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorContextThreadDto] = SQL("select * from executorContextThread where executorContextId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorContextThreadDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertExecutorContextThreadDto(dto : ExecutorContextThreadDto): ExecutorContextThreadDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorContextThread where executorContextThreadId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorContextThreadDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorContextThreadDto(executorContextId : Long, threadId : Int, threadName : String, threadPriority : Int, threadStatus : String, isRunning : Int, isInitialized : Int, isWorking : Int, isStopped : Int, isDaemon : Int, runInterval : Int, startTime : java.util.Date, stopTime : java.util.Date, endTime : java.util.Date) : ExecutorContextThreadDto = {
    val dto = new ExecutorContextThreadDto(0,0,new Date(),new Date(),executorContextId,threadId,threadName,threadPriority,threadStatus,isRunning,isInitialized,isWorking,isStopped,isDaemon,runInterval,startTime,stopTime,endTime)
    insertExecutorContextThreadDto(dto);   
  }   
  def updateExecutorContextThreadDto(dto : ExecutorContextThreadDto): ExecutorContextThreadDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorContextThread set  lastUpdatedDate = {lastUpdatedDate} ,  executorContextId = {executorContextId} ,  threadId = {threadId} ,  threadName = {threadName} ,  threadPriority = {threadPriority} ,  threadStatus = {threadStatus} ,  isRunning = {isRunning} ,  isInitialized = {isInitialized} ,  isWorking = {isWorking} ,  isStopped = {isStopped} ,  isDaemon = {isDaemon} ,  runInterval = {runInterval} ,  startTime = {startTime} ,  stopTime = {stopTime} ,  endTime = {endTime}  where  executorContextThreadId = {executorContextThreadId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorContextId" -> dto.executorContextId , "threadId" -> dto.threadId , "threadName" -> dto.threadName , "threadPriority" -> dto.threadPriority , "threadStatus" -> dto.threadStatus , "isRunning" -> dto.isRunning , "isInitialized" -> dto.isInitialized , "isWorking" -> dto.isWorking , "isStopped" -> dto.isStopped , "isDaemon" -> dto.isDaemon , "runInterval" -> dto.runInterval , "startTime" -> dto.startTime , "stopTime" -> dto.stopTime , "endTime" -> dto.endTime, "executorContextThreadId" -> dto.executorContextThreadId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorContextThreadByPk(dto.executorContextThreadId) 
    } 

} 
