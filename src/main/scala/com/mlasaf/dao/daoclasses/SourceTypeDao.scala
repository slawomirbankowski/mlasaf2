/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class SourceTypeDao extends DaoBase { 

  def getSourceTypesList() : List[SourceTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[SourceTypeDto]= SQL("select * from sourceType").as(anorm.Macro.namedParser[SourceTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getSourceTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from sourceType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getSourceTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from sourceType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getSourceTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from sourceType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getSourceTypeFirst() : SourceTypeDto = {
   implicit val connection = getConnection();
   val dtos : SourceTypeDto= SQL("select * from sourceType order by insertedRowDate asc ").as(anorm.Macro.namedParser[SourceTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getSourceTypeLast() : SourceTypeDto = {
   implicit val connection = getConnection();
   val dtos : SourceTypeDto= SQL("select * from sourceType order by insertedRowDate desc ").as(anorm.Macro.namedParser[SourceTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getSourceTypesByField(fieldName : String, fieldValue : String) : List[SourceTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[SourceTypeDto]= SQL("select * from sourceType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[SourceTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getSourceTypeByGuid(guid : Long) : SourceTypeDto = {
   implicit val connection = getConnection();
   val dtos : SourceTypeDto= SQL("select * from sourceType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[SourceTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getSourceTypeByPk(pkColValue : Long) : SourceTypeDto = { 
   implicit val connection = getConnection();  
   val dto : SourceTypeDto = SQL("select * from sourceType where sourceTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[SourceTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getSourceTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(sourceTypeId) as maxId from sourceType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getSourceTypeByName(nameColValue : String) : List[SourceTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[SourceTypeDto] = SQL("select * from sourceType where sourceTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[SourceTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getSourceTypeFirstByName(nameColValue : String) : Option[SourceTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[SourceTypeDto] = SQL("select * from sourceType where sourceTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[SourceTypeDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertSourceTypeDto(dto : SourceTypeDto): SourceTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from sourceType where sourceTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[SourceTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertSourceTypeDto(sourceTypeName : String, sourceTypeClass : String) : SourceTypeDto = {
    val dto = new SourceTypeDto(0,0,new Date(),new Date(),sourceTypeName,sourceTypeClass)
    insertSourceTypeDto(dto);   
  }   
  def updateSourceTypeDto(dto : SourceTypeDto): SourceTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update sourceType set  lastUpdatedDate = {lastUpdatedDate} ,  sourceTypeName = {sourceTypeName} ,  sourceTypeClass = {sourceTypeClass}  where  sourceTypeId = {sourceTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "sourceTypeName" -> dto.sourceTypeName , "sourceTypeClass" -> dto.sourceTypeClass, "sourceTypeId" -> dto.sourceTypeId ).executeInsert() 
   releaseConnection(connection);  
     getSourceTypeByPk(dto.sourceTypeId) 
    } 

} 
