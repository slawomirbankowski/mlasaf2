/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmRunInfoDao extends DaoBase { 

  def getVAlgorithmRunInfosList() : List[VAlgorithmRunInfoDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmRunInfoDto]= SQL("select * from vAlgorithmRunInfo").as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunInfosCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmRunInfo").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmRunInfosLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmRunInfo").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmRunInfosLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmRunInfo").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmRunInfoFirst() : VAlgorithmRunInfoDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunInfoDto= SQL("select * from vAlgorithmRunInfo order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunInfoLast() : VAlgorithmRunInfoDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunInfoDto= SQL("select * from vAlgorithmRunInfo order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunInfosByField(fieldName : String, fieldValue : String) : List[VAlgorithmRunInfoDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmRunInfoDto]= SQL("select * from vAlgorithmRunInfo where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunInfoByGuid(guid : Long) : VAlgorithmRunInfoDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunInfoDto= SQL("select * from vAlgorithmRunInfo where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmRunInfoId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRunInfoId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRunId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoTypeId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResourceId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResourceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsValid(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where isValid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoType_algorithmInfoTypeId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoType_algorithmInfoTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoType_guid(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoType_algorithmInfoTypeName(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoType_algorithmInfoTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoType_algorithmInfoTypeDescription(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoType_algorithmInfoTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoType_algorithmInfoTypeFormat(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmInfoType_algorithmInfoTypeFormat = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmRunId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_algorithmRunId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_guid(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmScheduleId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_executorInstanceId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_executorStorageId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmRunTypeId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_algorithmRunTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_algorithmRunName(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_algorithmRunName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_runDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_runDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_runStatus(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_runStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_isError(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_isError = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_errorDescription(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_errorDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_isRunning(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRun_isFinished(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmRun_isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_guid(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmImplementationId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_algorithmImplementationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleTypeId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_algorithmScheduleTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleName(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_algorithmScheduleName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isScheduled(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_isScheduled = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_intervalValue(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_intervalValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isRunning(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where algorithmSchedule_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_guid(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorHostId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageTypeId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageDefinition(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageBasePath(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageFulllPath(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_isRunning(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_portNumber(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorage_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_executorStorageResourceId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_executorStorageResourceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_guid(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_executorStorageId(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_resourcePath(colValue : String) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_resourcePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_resourceSize(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_resourceSize = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_resourceRowsCount(colValue : Long) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_resourceRowsCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageResource_isValid(colValue : Int) : List[VAlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunInfoDto] = SQL("select * from vAlgorithmRunInfo where executorStorageResource_isValid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
