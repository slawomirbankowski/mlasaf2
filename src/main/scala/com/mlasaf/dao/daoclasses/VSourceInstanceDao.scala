/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceInstanceDao extends DaoBase { 

  def getVSourceInstancesList() : List[VSourceInstanceDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceInstanceDto]= SQL("select * from vSourceInstance").as(anorm.Macro.namedParser[VSourceInstanceDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstancesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceInstance").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVSourceInstancesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceInstance").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceInstancesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceInstance").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceInstanceFirst() : VSourceInstanceDto = {
   implicit val connection = getConnection();
   val dtos : VSourceInstanceDto= SQL("select * from vSourceInstance order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceInstanceDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstanceLast() : VSourceInstanceDto = {
   implicit val connection = getConnection();
   val dtos : VSourceInstanceDto= SQL("select * from vSourceInstance order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceInstanceDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstancesByField(fieldName : String, fieldValue : String) : List[VSourceInstanceDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceInstanceDto]= SQL("select * from vSourceInstance where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceInstanceByGuid(guid : Long) : VSourceInstanceDto = {
   implicit val connection = getConnection();
   val dtos : VSourceInstanceDto= SQL("select * from vSourceInstance where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceInstanceDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosBySourceInstanceId(colValue : Long) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceTypeId(colValue : Long) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceInstanceName(colValue : String) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceInstanceName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByErrorCount(colValue : Long) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where errorCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByCorrectCount(colValue : Long) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where correctCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastStatus(colValue : String) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where lastStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastConnectionDate(colValue : java.util.Date) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where lastConnectionDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_sourceTypeId(colValue : Long) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceType_sourceTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_guid(colValue : Long) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_insertedRowDate(colValue : java.util.Date) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_lastUpdatedDate(colValue : java.util.Date) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_sourceTypeName(colValue : String) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceType_sourceTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceType_sourceTypeClass(colValue : String) : List[VSourceInstanceDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceInstanceDto] = SQL("select * from vSourceInstance where sourceType_sourceTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceInstanceDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
