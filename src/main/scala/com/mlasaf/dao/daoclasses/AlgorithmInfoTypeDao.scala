/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmInfoTypeDao extends DaoBase { 

  def getAlgorithmInfoTypesList() : List[AlgorithmInfoTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmInfoTypeDto]= SQL("select * from algorithmInfoType").as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmInfoTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmInfoType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmInfoTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmInfoType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmInfoTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmInfoType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmInfoTypeFirst() : AlgorithmInfoTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmInfoTypeDto= SQL("select * from algorithmInfoType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmInfoTypeLast() : AlgorithmInfoTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmInfoTypeDto= SQL("select * from algorithmInfoType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmInfoTypesByField(fieldName : String, fieldValue : String) : List[AlgorithmInfoTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmInfoTypeDto]= SQL("select * from algorithmInfoType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmInfoTypeByGuid(guid : Long) : AlgorithmInfoTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmInfoTypeDto= SQL("select * from algorithmInfoType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmInfoTypeByPk(pkColValue : Long) : AlgorithmInfoTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmInfoTypeDto = SQL("select * from algorithmInfoType where algorithmInfoTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmInfoTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmInfoTypeId) as maxId from algorithmInfoType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmInfoTypeByName(nameColValue : String) : List[AlgorithmInfoTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmInfoTypeDto] = SQL("select * from algorithmInfoType where algorithmInfoTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmInfoTypeFirstByName(nameColValue : String) : Option[AlgorithmInfoTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmInfoTypeDto] = SQL("select * from algorithmInfoType where algorithmInfoTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertAlgorithmInfoTypeDto(dto : AlgorithmInfoTypeDto): AlgorithmInfoTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmInfoType where algorithmInfoTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmInfoTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmInfoTypeDto(algorithmInfoTypeName : String, algorithmInfoTypeDescription : String, algorithmInfoTypeFormat : String) : AlgorithmInfoTypeDto = {
    val dto = new AlgorithmInfoTypeDto(0,0,new Date(),new Date(),algorithmInfoTypeName,algorithmInfoTypeDescription,algorithmInfoTypeFormat)
    insertAlgorithmInfoTypeDto(dto);   
  }   
  def updateAlgorithmInfoTypeDto(dto : AlgorithmInfoTypeDto): AlgorithmInfoTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmInfoType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmInfoTypeName = {algorithmInfoTypeName} ,  algorithmInfoTypeDescription = {algorithmInfoTypeDescription} ,  algorithmInfoTypeFormat = {algorithmInfoTypeFormat}  where  algorithmInfoTypeId = {algorithmInfoTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmInfoTypeName" -> dto.algorithmInfoTypeName , "algorithmInfoTypeDescription" -> dto.algorithmInfoTypeDescription , "algorithmInfoTypeFormat" -> dto.algorithmInfoTypeFormat, "algorithmInfoTypeId" -> dto.algorithmInfoTypeId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmInfoTypeByPk(dto.algorithmInfoTypeId) 
    } 

} 
