/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VDownloadTransformSummaryDao extends DaoBase { 

  def getVDownloadTransformSummarysList() : List[VDownloadTransformSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VDownloadTransformSummaryDto]= SQL("select * from vDownloadTransformSummary").as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVDownloadTransformSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vDownloadTransformSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVDownloadTransformSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vDownloadTransformSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVDownloadTransformSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vDownloadTransformSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVDownloadTransformSummaryFirst() : VDownloadTransformSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VDownloadTransformSummaryDto= SQL("select * from vDownloadTransformSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVDownloadTransformSummaryLast() : VDownloadTransformSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VDownloadTransformSummaryDto= SQL("select * from vDownloadTransformSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVDownloadTransformSummarysByField(fieldName : String, fieldValue : String) : List[VDownloadTransformSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VDownloadTransformSummaryDto]= SQL("select * from vDownloadTransformSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVDownloadTransformSummaryByGuid(guid : Long) : VDownloadTransformSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VDownloadTransformSummaryDto= SQL("select * from vDownloadTransformSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByDownloadTransformId(colValue : Long) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where downloadTransformId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformTypeId(colValue : Long) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where downloadTransformTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformGroupId(colValue : Long) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where downloadTransformGroupId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformDefinition(colValue : String) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where downloadTransformDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByDownloadTransformColumn_count(colValue : Int) : List[VDownloadTransformSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformSummaryDto] = SQL("select * from vDownloadTransformSummary where downloadTransformColumn_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
