/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmRunInfoDao extends DaoBase { 

  def getAlgorithmRunInfosList() : List[AlgorithmRunInfoDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmRunInfoDto]= SQL("select * from algorithmRunInfo").as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmRunInfosCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmRunInfo").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmRunInfosLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmRunInfo").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmRunInfosLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmRunInfo").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmRunInfoFirst() : AlgorithmRunInfoDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmRunInfoDto= SQL("select * from algorithmRunInfo order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmRunInfoLast() : AlgorithmRunInfoDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmRunInfoDto= SQL("select * from algorithmRunInfo order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmRunInfosByField(fieldName : String, fieldValue : String) : List[AlgorithmRunInfoDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmRunInfoDto]= SQL("select * from algorithmRunInfo where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmRunInfoByGuid(guid : Long) : AlgorithmRunInfoDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmRunInfoDto= SQL("select * from algorithmRunInfo where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmRunInfoByPk(pkColValue : Long) : AlgorithmRunInfoDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmRunInfoDto = SQL("select * from algorithmRunInfo where algorithmRunInfoId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmRunInfoMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmRunInfoId) as maxId from algorithmRunInfo ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmRunInfoByFkAlgorithmInfoTypeId(fkColValue : Long) : List[AlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmRunInfoDto] = SQL("select * from algorithmRunInfo where algorithmInfoTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmRunInfoByFkAlgorithmRunId(fkColValue : Long) : List[AlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmRunInfoDto] = SQL("select * from algorithmRunInfo where algorithmRunId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmRunInfoByFkAlgorithmScheduleId(fkColValue : Long) : List[AlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmRunInfoDto] = SQL("select * from algorithmRunInfo where algorithmScheduleId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmRunInfoByFkExecutorStorageId(fkColValue : Long) : List[AlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmRunInfoDto] = SQL("select * from algorithmRunInfo where executorStorageId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmRunInfoByFkExecutorStorageResourceId(fkColValue : Long) : List[AlgorithmRunInfoDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmRunInfoDto] = SQL("select * from algorithmRunInfo where executorStorageResourceId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertAlgorithmRunInfoDto(dto : AlgorithmRunInfoDto): AlgorithmRunInfoDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmRunInfo where algorithmRunInfoId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmRunInfoDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmRunInfoDto(algorithmScheduleId : Long, algorithmRunId : Long, executorStorageId : Long, algorithmInfoTypeId : Long, executorStorageResourceId : Long, isValid : Int) : AlgorithmRunInfoDto = {
    val dto = new AlgorithmRunInfoDto(0,0,new Date(),new Date(),algorithmScheduleId,algorithmRunId,executorStorageId,algorithmInfoTypeId,executorStorageResourceId,isValid)
    insertAlgorithmRunInfoDto(dto);   
  }   
  def updateAlgorithmRunInfoDto(dto : AlgorithmRunInfoDto): AlgorithmRunInfoDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmRunInfo set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmScheduleId = {algorithmScheduleId} ,  algorithmRunId = {algorithmRunId} ,  executorStorageId = {executorStorageId} ,  algorithmInfoTypeId = {algorithmInfoTypeId} ,  executorStorageResourceId = {executorStorageResourceId} ,  isValid = {isValid}  where  algorithmRunInfoId = {algorithmRunInfoId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmScheduleId" -> dto.algorithmScheduleId , "algorithmRunId" -> dto.algorithmRunId , "executorStorageId" -> dto.executorStorageId , "algorithmInfoTypeId" -> dto.algorithmInfoTypeId , "executorStorageResourceId" -> dto.executorStorageResourceId , "isValid" -> dto.isValid, "algorithmRunInfoId" -> dto.algorithmRunInfoId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmRunInfoByPk(dto.algorithmRunInfoId) 
    } 

} 
