/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmTypeColumnTypeDao extends DaoBase { 

  def getVAlgorithmTypeColumnTypesList() : List[VAlgorithmTypeColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeColumnTypeDto]= SQL("select * from vAlgorithmTypeColumnType").as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeColumnTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmTypeColumnType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmTypeColumnTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmTypeColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeColumnTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmTypeColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeColumnTypeFirst() : VAlgorithmTypeColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeColumnTypeDto= SQL("select * from vAlgorithmTypeColumnType order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeColumnTypeLast() : VAlgorithmTypeColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeColumnTypeDto= SQL("select * from vAlgorithmTypeColumnType order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeColumnTypesByField(fieldName : String, fieldValue : String) : List[VAlgorithmTypeColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeColumnTypeDto]= SQL("select * from vAlgorithmTypeColumnType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeColumnTypeByGuid(guid : Long) : VAlgorithmTypeColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeColumnTypeDto= SQL("select * from vAlgorithmTypeColumnType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmTypeColumnTypeId(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersionId(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnTypeId(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllowMultiple(colValue : Int) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where allowMultiple = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAllowEmpty(colValue : Int) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where allowEmpty = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_algorithmColumnTypeId(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmColumnType_algorithmColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_guid(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmColumnType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmColumnType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmColumnType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_algorithmColumnTypeName(colValue : String) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmColumnType_algorithmColumnTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnType_algorithmColumnTypeDescription(colValue : String) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmColumnType_algorithmColumnTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_algorithmTypeVersionId(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeVersion_algorithmTypeVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeVersion_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeVersion_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_guid(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeVersion_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_algorithmTypeId(colValue : Long) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeVersion_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersion_algorithmTypeVersionName(colValue : String) : List[VAlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeColumnTypeDto] = SQL("select * from vAlgorithmTypeColumnType where algorithmTypeVersion_algorithmTypeVersionName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
