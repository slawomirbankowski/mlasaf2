/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmColumnTypeSummaryDao extends DaoBase { 

  def getVAlgorithmColumnTypeSummarysList() : List[VAlgorithmColumnTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmColumnTypeSummaryDto]= SQL("select * from vAlgorithmColumnTypeSummary").as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmColumnTypeSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmColumnTypeSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmColumnTypeSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmColumnTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmColumnTypeSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmColumnTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmColumnTypeSummaryFirst() : VAlgorithmColumnTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmColumnTypeSummaryDto= SQL("select * from vAlgorithmColumnTypeSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmColumnTypeSummaryLast() : VAlgorithmColumnTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmColumnTypeSummaryDto= SQL("select * from vAlgorithmColumnTypeSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmColumnTypeSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmColumnTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmColumnTypeSummaryDto]= SQL("select * from vAlgorithmColumnTypeSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmColumnTypeSummaryByGuid(guid : Long) : VAlgorithmColumnTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmColumnTypeSummaryDto= SQL("select * from vAlgorithmColumnTypeSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmColumnTypeId(colValue : Long) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where algorithmColumnTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnTypeName(colValue : String) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where algorithmColumnTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmColumnTypeDescription(colValue : String) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where algorithmColumnTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByVerificationClassName(colValue : String) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where verificationClassName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByVerificationDefinition(colValue : String) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where verificationDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersionColumnType_count(colValue : Int) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where algorithmVersionColumnType_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleColumn_count(colValue : Int) : List[VAlgorithmColumnTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmColumnTypeSummaryDto] = SQL("select * from vAlgorithmColumnTypeSummary where algorithmScheduleColumn_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmColumnTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
