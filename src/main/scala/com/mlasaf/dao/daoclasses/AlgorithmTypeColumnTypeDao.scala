/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmTypeColumnTypeDao extends DaoBase { 

  def getAlgorithmTypeColumnTypesList() : List[AlgorithmTypeColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmTypeColumnTypeDto]= SQL("select * from algorithmTypeColumnType").as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmTypeColumnTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmTypeColumnType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmTypeColumnTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmTypeColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmTypeColumnTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmTypeColumnType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmTypeColumnTypeFirst() : AlgorithmTypeColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmTypeColumnTypeDto= SQL("select * from algorithmTypeColumnType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmTypeColumnTypeLast() : AlgorithmTypeColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmTypeColumnTypeDto= SQL("select * from algorithmTypeColumnType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmTypeColumnTypesByField(fieldName : String, fieldValue : String) : List[AlgorithmTypeColumnTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmTypeColumnTypeDto]= SQL("select * from algorithmTypeColumnType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmTypeColumnTypeByGuid(guid : Long) : AlgorithmTypeColumnTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmTypeColumnTypeDto= SQL("select * from algorithmTypeColumnType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmTypeColumnTypeByPk(pkColValue : Long) : AlgorithmTypeColumnTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmTypeColumnTypeDto = SQL("select * from algorithmTypeColumnType where algorithmTypeColumnTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmTypeColumnTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmTypeColumnTypeId) as maxId from algorithmTypeColumnType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmTypeColumnTypeByFkAlgorithmColumnTypeId(fkColValue : Long) : List[AlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmTypeColumnTypeDto] = SQL("select * from algorithmTypeColumnType where algorithmColumnTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmTypeColumnTypeByFkAlgorithmTypeVersionId(fkColValue : Long) : List[AlgorithmTypeColumnTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmTypeColumnTypeDto] = SQL("select * from algorithmTypeColumnType where algorithmTypeVersionId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertAlgorithmTypeColumnTypeDto(dto : AlgorithmTypeColumnTypeDto): AlgorithmTypeColumnTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmTypeColumnType where algorithmTypeColumnTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmTypeColumnTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmTypeColumnTypeDto(algorithmTypeVersionId : Long, algorithmColumnTypeId : Long, allowMultiple : Int, allowEmpty : Int) : AlgorithmTypeColumnTypeDto = {
    val dto = new AlgorithmTypeColumnTypeDto(0,0,new Date(),new Date(),algorithmTypeVersionId,algorithmColumnTypeId,allowMultiple,allowEmpty)
    insertAlgorithmTypeColumnTypeDto(dto);   
  }   
  def updateAlgorithmTypeColumnTypeDto(dto : AlgorithmTypeColumnTypeDto): AlgorithmTypeColumnTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmTypeColumnType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmTypeVersionId = {algorithmTypeVersionId} ,  algorithmColumnTypeId = {algorithmColumnTypeId} ,  allowMultiple = {allowMultiple} ,  allowEmpty = {allowEmpty}  where  algorithmTypeColumnTypeId = {algorithmTypeColumnTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmTypeVersionId" -> dto.algorithmTypeVersionId , "algorithmColumnTypeId" -> dto.algorithmColumnTypeId , "allowMultiple" -> dto.allowMultiple , "allowEmpty" -> dto.allowEmpty, "algorithmTypeColumnTypeId" -> dto.algorithmTypeColumnTypeId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmTypeColumnTypeByPk(dto.algorithmTypeColumnTypeId) 
    } 

} 
