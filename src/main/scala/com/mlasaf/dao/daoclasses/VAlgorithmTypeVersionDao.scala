/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmTypeVersionDao extends DaoBase { 

  def getVAlgorithmTypeVersionsList() : List[VAlgorithmTypeVersionDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeVersionDto]= SQL("select * from vAlgorithmTypeVersion").as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmTypeVersion").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmTypeVersionsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmTypeVersion").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeVersionsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmTypeVersion").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeVersionFirst() : VAlgorithmTypeVersionDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeVersionDto= SQL("select * from vAlgorithmTypeVersion order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionLast() : VAlgorithmTypeVersionDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeVersionDto= SQL("select * from vAlgorithmTypeVersion order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionsByField(fieldName : String, fieldValue : String) : List[VAlgorithmTypeVersionDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeVersionDto]= SQL("select * from vAlgorithmTypeVersion where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeVersionByGuid(guid : Long) : VAlgorithmTypeVersionDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeVersionDto= SQL("select * from vAlgorithmTypeVersion where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmTypeVersionId(colValue : Long) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmTypeVersionId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeId(colValue : Long) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeVersionName(colValue : String) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmTypeVersionName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeId(colValue : Long) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmType_algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_guid(colValue : Long) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeName(colValue : String) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmType_algorithmTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmType_algorithmTypeDescription(colValue : String) : List[VAlgorithmTypeVersionDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeVersionDto] = SQL("select * from vAlgorithmTypeVersion where algorithmType_algorithmTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeVersionDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
