/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorContextStateDao extends DaoBase { 

  def getVExecutorContextStatesList() : List[VExecutorContextStateDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextStateDto]= SQL("select * from vExecutorContextState").as(anorm.Macro.namedParser[VExecutorContextStateDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextStatesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorContextState").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorContextStatesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorContextState").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextStatesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorContextState").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorContextStateFirst() : VExecutorContextStateDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextStateDto= SQL("select * from vExecutorContextState order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorContextStateDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextStateLast() : VExecutorContextStateDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextStateDto= SQL("select * from vExecutorContextState order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorContextStateDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextStatesByField(fieldName : String, fieldValue : String) : List[VExecutorContextStateDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorContextStateDto]= SQL("select * from vExecutorContextState where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorContextStateByGuid(guid : Long) : VExecutorContextStateDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorContextStateDto= SQL("select * from vExecutorContextState where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorContextStateDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorContextStateId(colValue : Long) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContextStateId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextId(colValue : Long) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByStateName(colValue : String) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where stateName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInfoContent(colValue : String) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where infoContent = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExceptionDescription(colValue : String) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where exceptionDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_executorContextId(colValue : Long) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_guid(colValue : Long) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_insertedRowDate(colValue : java.util.Date) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_executorHostId(colValue : Long) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_isWorking(colValue : Int) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties(colValue : String) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_properties = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties2(colValue : String) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_properties2 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_properties3(colValue : String) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_properties3 = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContext_entryParams(colValue : String) : List[VExecutorContextStateDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorContextStateDto] = SQL("select * from vExecutorContextState where executorContext_entryParams = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorContextStateDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
