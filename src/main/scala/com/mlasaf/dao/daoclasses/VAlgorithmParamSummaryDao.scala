/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmParamSummaryDao extends DaoBase { 

  def getVAlgorithmParamSummarysList() : List[VAlgorithmParamSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmParamSummaryDto]= SQL("select * from vAlgorithmParamSummary").as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmParamSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmParamSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmParamSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmParamSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmParamSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmParamSummaryFirst() : VAlgorithmParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmParamSummaryDto= SQL("select * from vAlgorithmParamSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamSummaryLast() : VAlgorithmParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmParamSummaryDto= SQL("select * from vAlgorithmParamSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmParamSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmParamSummaryDto]= SQL("select * from vAlgorithmParamSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmParamSummaryByGuid(guid : Long) : VAlgorithmParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmParamSummaryDto= SQL("select * from vAlgorithmParamSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmParamId(colValue : Long) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where algorithmParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamName(colValue : String) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where algorithmParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamDescription(colValue : String) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where algorithmParamDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmParamType(colValue : String) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where algorithmParamType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersionParamType_count(colValue : Int) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where algorithmVersionParamType_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleParam_count(colValue : Int) : List[VAlgorithmParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmParamSummaryDto] = SQL("select * from vAlgorithmParamSummary where algorithmScheduleParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
