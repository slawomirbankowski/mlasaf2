/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmTypeSummaryDao extends DaoBase { 

  def getVAlgorithmTypeSummarysList() : List[VAlgorithmTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeSummaryDto]= SQL("select * from vAlgorithmTypeSummary").as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmTypeSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmTypeSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmTypeSummaryFirst() : VAlgorithmTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeSummaryDto= SQL("select * from vAlgorithmTypeSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeSummaryLast() : VAlgorithmTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeSummaryDto= SQL("select * from vAlgorithmTypeSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmTypeSummaryDto]= SQL("select * from vAlgorithmTypeSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmTypeSummaryByGuid(guid : Long) : VAlgorithmTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmTypeSummaryDto= SQL("select * from vAlgorithmTypeSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmTypeId(colValue : Long) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where algorithmTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeName(colValue : String) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where algorithmTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmTypeDescription(colValue : String) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where algorithmTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersion_count(colValue : Int) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where algorithmVersion_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmImplementation_count(colValue : Int) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where algorithmImplementation_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmVersionParamType_count(colValue : Int) : List[VAlgorithmTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmTypeSummaryDto] = SQL("select * from vAlgorithmTypeSummary where algorithmVersionParamType_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
