/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorCommandSummaryDao extends DaoBase { 

  def getVExecutorCommandSummarysList() : List[VExecutorCommandSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorCommandSummaryDto]= SQL("select * from vExecutorCommandSummary").as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorCommandSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorCommandSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVExecutorCommandSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorCommandSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorCommandSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorCommandSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVExecutorCommandSummaryFirst() : VExecutorCommandSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorCommandSummaryDto= SQL("select * from vExecutorCommandSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorCommandSummaryLast() : VExecutorCommandSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorCommandSummaryDto= SQL("select * from vExecutorCommandSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVExecutorCommandSummarysByField(fieldName : String, fieldValue : String) : List[VExecutorCommandSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorCommandSummaryDto]= SQL("select * from vExecutorCommandSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVExecutorCommandSummaryByGuid(guid : Long) : VExecutorCommandSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorCommandSummaryDto= SQL("select * from vExecutorCommandSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByExecutorCommandId(colValue : Long) : List[VExecutorCommandSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorCommandSummaryDto] = SQL("select * from vExecutorCommandSummary where executorCommandId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorCommandSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorCommandSummaryDto] = SQL("select * from vExecutorCommandSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorCommandSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorCommandSummaryDto] = SQL("select * from vExecutorCommandSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorCommandSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorCommandSummaryDto] = SQL("select * from vExecutorCommandSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommandName(colValue : String) : List[VExecutorCommandSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorCommandSummaryDto] = SQL("select * from vExecutorCommandSummary where executorCommandName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorCommandClass(colValue : String) : List[VExecutorCommandSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorCommandSummaryDto] = SQL("select * from vExecutorCommandSummary where executorCommandClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorContextCommand_count(colValue : Int) : List[VExecutorCommandSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorCommandSummaryDto] = SQL("select * from vExecutorCommandSummary where executorContextCommand_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorCommandSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
