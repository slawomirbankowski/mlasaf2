/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceParamSummaryDao extends DaoBase { 

  def getVSourceParamSummarysList() : List[VSourceParamSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceParamSummaryDto]= SQL("select * from vSourceParamSummary").as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceParamSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceParamSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVSourceParamSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceParamSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceParamSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceParamSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVSourceParamSummaryFirst() : VSourceParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceParamSummaryDto= SQL("select * from vSourceParamSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceParamSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceParamSummaryLast() : VSourceParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceParamSummaryDto= SQL("select * from vSourceParamSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceParamSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVSourceParamSummarysByField(fieldName : String, fieldValue : String) : List[VSourceParamSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceParamSummaryDto]= SQL("select * from vSourceParamSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVSourceParamSummaryByGuid(guid : Long) : VSourceParamSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceParamSummaryDto= SQL("select * from vSourceParamSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceParamSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosBySourceParamId(colValue : Long) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where sourceParamId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParamName(colValue : String) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where sourceParamName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParamType(colValue : String) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where sourceParamType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByPossibleValues(colValue : String) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where possibleValues = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceTypeParam_count(colValue : Int) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where sourceTypeParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosBySourceParamValue_count(colValue : Int) : List[VSourceParamSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceParamSummaryDto] = SQL("select * from vSourceParamSummary where sourceParamValue_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceParamSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
