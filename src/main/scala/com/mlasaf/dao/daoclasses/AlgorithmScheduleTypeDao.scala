/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmScheduleTypeDao extends DaoBase { 

  def getAlgorithmScheduleTypesList() : List[AlgorithmScheduleTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmScheduleTypeDto]= SQL("select * from algorithmScheduleType").as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmScheduleTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmScheduleType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmScheduleTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmScheduleType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmScheduleTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmScheduleType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmScheduleTypeFirst() : AlgorithmScheduleTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmScheduleTypeDto= SQL("select * from algorithmScheduleType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmScheduleTypeLast() : AlgorithmScheduleTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmScheduleTypeDto= SQL("select * from algorithmScheduleType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmScheduleTypesByField(fieldName : String, fieldValue : String) : List[AlgorithmScheduleTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmScheduleTypeDto]= SQL("select * from algorithmScheduleType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmScheduleTypeByGuid(guid : Long) : AlgorithmScheduleTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmScheduleTypeDto= SQL("select * from algorithmScheduleType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmScheduleTypeByPk(pkColValue : Long) : AlgorithmScheduleTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmScheduleTypeDto = SQL("select * from algorithmScheduleType where algorithmScheduleTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmScheduleTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmScheduleTypeId) as maxId from algorithmScheduleType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmScheduleTypeByName(nameColValue : String) : List[AlgorithmScheduleTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmScheduleTypeDto] = SQL("select * from algorithmScheduleType where algorithmScheduleTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmScheduleTypeFirstByName(nameColValue : String) : Option[AlgorithmScheduleTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmScheduleTypeDto] = SQL("select * from algorithmScheduleType where algorithmScheduleTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertAlgorithmScheduleTypeDto(dto : AlgorithmScheduleTypeDto): AlgorithmScheduleTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmScheduleType where algorithmScheduleTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmScheduleTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmScheduleTypeDto(algorithmScheduleTypeName : String) : AlgorithmScheduleTypeDto = {
    val dto = new AlgorithmScheduleTypeDto(0,0,new Date(),new Date(),algorithmScheduleTypeName)
    insertAlgorithmScheduleTypeDto(dto);   
  }   
  def updateAlgorithmScheduleTypeDto(dto : AlgorithmScheduleTypeDto): AlgorithmScheduleTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmScheduleType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmScheduleTypeName = {algorithmScheduleTypeName}  where  algorithmScheduleTypeId = {algorithmScheduleTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmScheduleTypeName" -> dto.algorithmScheduleTypeName, "algorithmScheduleTypeId" -> dto.algorithmScheduleTypeId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmScheduleTypeByPk(dto.algorithmScheduleTypeId) 
    } 

} 
