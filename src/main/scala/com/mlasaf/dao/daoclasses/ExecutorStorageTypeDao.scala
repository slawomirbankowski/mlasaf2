/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorStorageTypeDao extends DaoBase { 

  def getExecutorStorageTypesList() : List[ExecutorStorageTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorStorageTypeDto]= SQL("select * from executorStorageType").as(anorm.Macro.namedParser[ExecutorStorageTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorStorageType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getExecutorStorageTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorStorageType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorStorageTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorStorageType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getExecutorStorageTypeFirst() : ExecutorStorageTypeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageTypeDto= SQL("select * from executorStorageType order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorStorageTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageTypeLast() : ExecutorStorageTypeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageTypeDto= SQL("select * from executorStorageType order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorStorageTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageTypesByField(fieldName : String, fieldValue : String) : List[ExecutorStorageTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorStorageTypeDto]= SQL("select * from executorStorageType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[ExecutorStorageTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getExecutorStorageTypeByGuid(guid : Long) : ExecutorStorageTypeDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorStorageTypeDto= SQL("select * from executorStorageType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorStorageTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getExecutorStorageTypeByPk(pkColValue : Long) : ExecutorStorageTypeDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorStorageTypeDto = SQL("select * from executorStorageType where executorStorageTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorStorageTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getExecutorStorageTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorStorageTypeId) as maxId from executorStorageType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getExecutorStorageTypeByName(nameColValue : String) : List[ExecutorStorageTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorStorageTypeDto] = SQL("select * from executorStorageType where executorStorageTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ExecutorStorageTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getExecutorStorageTypeFirstByName(nameColValue : String) : Option[ExecutorStorageTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorStorageTypeDto] = SQL("select * from executorStorageType where executorStorageTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[ExecutorStorageTypeDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertExecutorStorageTypeDto(dto : ExecutorStorageTypeDto): ExecutorStorageTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from executorStorageType where executorStorageTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorStorageTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertExecutorStorageTypeDto(executorStorageTypeName : String, executorStorageTypeClass : String) : ExecutorStorageTypeDto = {
    val dto = new ExecutorStorageTypeDto(0,0,new Date(),new Date(),executorStorageTypeName,executorStorageTypeClass)
    insertExecutorStorageTypeDto(dto);   
  }   
  def updateExecutorStorageTypeDto(dto : ExecutorStorageTypeDto): ExecutorStorageTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorStorageType set  lastUpdatedDate = {lastUpdatedDate} ,  executorStorageTypeName = {executorStorageTypeName} ,  executorStorageTypeClass = {executorStorageTypeClass}  where  executorStorageTypeId = {executorStorageTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorStorageTypeName" -> dto.executorStorageTypeName , "executorStorageTypeClass" -> dto.executorStorageTypeClass, "executorStorageTypeId" -> dto.executorStorageTypeId ).executeInsert() 
   releaseConnection(connection);  
     getExecutorStorageTypeByPk(dto.executorStorageTypeId) 
    } 

} 
