/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmRunDao extends DaoBase { 

  def getVAlgorithmRunsList() : List[VAlgorithmRunDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmRunDto]= SQL("select * from vAlgorithmRun").as(anorm.Macro.namedParser[VAlgorithmRunDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmRun").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmRunsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmRun").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmRunsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmRun").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmRunFirst() : VAlgorithmRunDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunDto= SQL("select * from vAlgorithmRun order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmRunDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunLast() : VAlgorithmRunDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunDto= SQL("select * from vAlgorithmRun order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmRunDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunsByField(fieldName : String, fieldValue : String) : List[VAlgorithmRunDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmRunDto]= SQL("select * from vAlgorithmRun where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmRunByGuid(guid : Long) : VAlgorithmRunDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmRunDto= SQL("select * from vAlgorithmRun where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmRunDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmRunId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmScheduleId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstanceId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunTypeId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunName(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRunDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where runDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByRunStatus(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where runStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsError(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where isError = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByErrorDescription(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where errorDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByIsFinished(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunType_algorithmRunTypeId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunType_algorithmRunTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunType_guid(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunType_algorithmRunTypeName(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmRunType_algorithmRunTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_algorithmScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_guid(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmImplementationId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_algorithmImplementationId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleTypeId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_algorithmScheduleTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_algorithmScheduleName(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_algorithmScheduleName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isScheduled(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_isScheduled = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_intervalValue(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_intervalValue = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmSchedule_isRunning(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where algorithmSchedule_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorInstanceId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_guid(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorTypeId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_executorTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorHostId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorContextId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorInstanceName(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_executorInstanceName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorDefinition(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_executorDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_executorParameters(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_executorParameters = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_isRunning(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_isFinished(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_portNumber(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorInstance_endDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorInstance_endDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_guid(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorHostId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageTypeId(colValue : Long) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageDefinition(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageBasePath(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageFulllPath(colValue : String) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_isRunning(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByExecutorStorage_portNumber(colValue : Int) : List[VAlgorithmRunDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmRunDto] = SQL("select * from vAlgorithmRun where executorStorage_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmRunDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
