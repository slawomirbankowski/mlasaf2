/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class SourceParamDao extends DaoBase { 

  def getSourceParamsList() : List[SourceParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[SourceParamDto]= SQL("select * from sourceParam").as(anorm.Macro.namedParser[SourceParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getSourceParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from sourceParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getSourceParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from sourceParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getSourceParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from sourceParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getSourceParamFirst() : SourceParamDto = {
   implicit val connection = getConnection();
   val dtos : SourceParamDto= SQL("select * from sourceParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[SourceParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getSourceParamLast() : SourceParamDto = {
   implicit val connection = getConnection();
   val dtos : SourceParamDto= SQL("select * from sourceParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[SourceParamDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getSourceParamsByField(fieldName : String, fieldValue : String) : List[SourceParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[SourceParamDto]= SQL("select * from sourceParam where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[SourceParamDto].*);
   releaseConnection(connection);
   dtos
  }
  def getSourceParamByGuid(guid : Long) : SourceParamDto = {
   implicit val connection = getConnection();
   val dtos : SourceParamDto= SQL("select * from sourceParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[SourceParamDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getSourceParamByPk(pkColValue : Long) : SourceParamDto = { 
   implicit val connection = getConnection();  
   val dto : SourceParamDto = SQL("select * from sourceParam where sourceParamId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[SourceParamDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getSourceParamMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(sourceParamId) as maxId from sourceParam ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getSourceParamByName(nameColValue : String) : List[SourceParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[SourceParamDto] = SQL("select * from sourceParam where sourceParamName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[SourceParamDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getSourceParamFirstByName(nameColValue : String) : Option[SourceParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[SourceParamDto] = SQL("select * from sourceParam where sourceParamName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[SourceParamDto].*);  
   releaseConnection(connection);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertSourceParamDto(dto : SourceParamDto): SourceParamDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from sourceParam where sourceParamId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[SourceParamDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertSourceParamDto(sourceParamName : String, sourceParamType : String, possibleValues : String) : SourceParamDto = {
    val dto = new SourceParamDto(0,0,new Date(),new Date(),sourceParamName,sourceParamType,possibleValues)
    insertSourceParamDto(dto);   
  }   
  def updateSourceParamDto(dto : SourceParamDto): SourceParamDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update sourceParam set  lastUpdatedDate = {lastUpdatedDate} ,  sourceParamName = {sourceParamName} ,  sourceParamType = {sourceParamType} ,  possibleValues = {possibleValues}  where  sourceParamId = {sourceParamId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "sourceParamName" -> dto.sourceParamName , "sourceParamType" -> dto.sourceParamType , "possibleValues" -> dto.possibleValues, "sourceParamId" -> dto.sourceParamId ).executeInsert() 
   releaseConnection(connection);  
     getSourceParamByPk(dto.sourceParamId) 
    } 

} 
