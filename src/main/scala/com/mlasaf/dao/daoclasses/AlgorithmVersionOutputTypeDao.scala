/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmVersionOutputTypeDao extends DaoBase { 

  def getAlgorithmVersionOutputTypesList() : List[AlgorithmVersionOutputTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionOutputTypeDto]= SQL("select * from algorithmVersionOutputType").as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionOutputTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmVersionOutputType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getAlgorithmVersionOutputTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmVersionOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionOutputTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmVersionOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getAlgorithmVersionOutputTypeFirst() : AlgorithmVersionOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionOutputTypeDto= SQL("select * from algorithmVersionOutputType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionOutputTypeLast() : AlgorithmVersionOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionOutputTypeDto= SQL("select * from algorithmVersionOutputType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionOutputTypesByField(fieldName : String, fieldValue : String) : List[AlgorithmVersionOutputTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmVersionOutputTypeDto]= SQL("select * from algorithmVersionOutputType where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].*);
   releaseConnection(connection);
   dtos
  }
  def getAlgorithmVersionOutputTypeByGuid(guid : Long) : AlgorithmVersionOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmVersionOutputTypeDto= SQL("select * from algorithmVersionOutputType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getAlgorithmVersionOutputTypeByPk(pkColValue : Long) : AlgorithmVersionOutputTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmVersionOutputTypeDto = SQL("select * from algorithmVersionOutputType where algorithmVersionOutputTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].single);  
   releaseConnection(connection);  
   dto  
 }  
 def getAlgorithmVersionOutputTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmVersionOutputTypeId) as maxId from algorithmVersionOutputType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   releaseConnection(connection);  
   maxid  
 }  
 def getAlgorithmVersionOutputTypeByFkAlgorithmOutputTypeId(fkColValue : Long) : List[AlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionOutputTypeDto] = SQL("select * from algorithmVersionOutputType where algorithmOutputTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getAlgorithmVersionOutputTypeByFkAlgorithmVersionId(fkColValue : Long) : List[AlgorithmVersionOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmVersionOutputTypeDto] = SQL("select * from algorithmVersionOutputType where algorithmVersionId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def insertAlgorithmVersionOutputTypeDto(dto : AlgorithmVersionOutputTypeDto): AlgorithmVersionOutputTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(connection); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      val r = SQL("select * from algorithmVersionOutputType where algorithmVersionOutputTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmVersionOutputTypeDto].single); 
      releaseConnection(connection);  
      r 
    } else { 
      releaseConnection(connection);  
      null; 
    } 
 } 
  def createAndInsertAlgorithmVersionOutputTypeDto(algorithmVersionId : Long, algorithmOutputTypeId : Long, isMandatory : Int, isMultiple : Int) : AlgorithmVersionOutputTypeDto = {
    val dto = new AlgorithmVersionOutputTypeDto(0,0,new Date(),new Date(),algorithmVersionId,algorithmOutputTypeId,isMandatory,isMultiple)
    insertAlgorithmVersionOutputTypeDto(dto);   
  }   
  def updateAlgorithmVersionOutputTypeDto(dto : AlgorithmVersionOutputTypeDto): AlgorithmVersionOutputTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmVersionOutputType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmVersionId = {algorithmVersionId} ,  algorithmOutputTypeId = {algorithmOutputTypeId} ,  isMandatory = {isMandatory} ,  isMultiple = {isMultiple}  where  algorithmVersionOutputTypeId = {algorithmVersionOutputTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmVersionId" -> dto.algorithmVersionId , "algorithmOutputTypeId" -> dto.algorithmOutputTypeId , "isMandatory" -> dto.isMandatory , "isMultiple" -> dto.isMultiple, "algorithmVersionOutputTypeId" -> dto.algorithmVersionOutputTypeId ).executeInsert() 
   releaseConnection(connection);  
     getAlgorithmVersionOutputTypeByPk(dto.algorithmVersionOutputTypeId) 
    } 

} 
