/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmInfoTypeSummaryDao extends DaoBase { 

  def getVAlgorithmInfoTypeSummarysList() : List[VAlgorithmInfoTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmInfoTypeSummaryDto]= SQL("select * from vAlgorithmInfoTypeSummary").as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmInfoTypeSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmInfoTypeSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);
   releaseConnection(connection);
   cnt
  }
  def getVAlgorithmInfoTypeSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmInfoTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmInfoTypeSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmInfoTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);
   releaseConnection(connection);
   ld
  }
  def getVAlgorithmInfoTypeSummaryFirst() : VAlgorithmInfoTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmInfoTypeSummaryDto= SQL("select * from vAlgorithmInfoTypeSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmInfoTypeSummaryLast() : VAlgorithmInfoTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmInfoTypeSummaryDto= SQL("select * from vAlgorithmInfoTypeSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*).head;
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmInfoTypeSummarysByField(fieldName : String, fieldValue : String) : List[VAlgorithmInfoTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmInfoTypeSummaryDto]= SQL("select * from vAlgorithmInfoTypeSummary where " + fieldName + " = {fieldValue} ").on("fieldValue" -> fieldValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);
   releaseConnection(connection);
   dtos
  }
  def getVAlgorithmInfoTypeSummaryByGuid(guid : Long) : VAlgorithmInfoTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmInfoTypeSummaryDto= SQL("select * from vAlgorithmInfoTypeSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].single);
   releaseConnection(connection);
   dtos
  }  
 def getDtosByAlgorithmInfoTypeId(colValue : Long) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where algorithmInfoTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoTypeName(colValue : String) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where algorithmInfoTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoTypeDescription(colValue : String) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where algorithmInfoTypeDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmInfoTypeFormat(colValue : String) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where algorithmInfoTypeFormat = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  
 def getDtosByAlgorithmRunInfo_count(colValue : Int) : List[VAlgorithmInfoTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmInfoTypeSummaryDto] = SQL("select * from vAlgorithmInfoTypeSummary where algorithmRunInfo_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmInfoTypeSummaryDto].*);  
   releaseConnection(connection);  
   dtos  
 }  

} 
